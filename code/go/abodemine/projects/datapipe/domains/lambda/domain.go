package lambda

import (
	"encoding/json"
	"time"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/aws/aws-sdk-go-v2/service/ecs"
	"github.com/aws/aws-sdk-go-v2/service/ecs/types"
	"github.com/aws/aws-sdk-go-v2/service/sqs"
	"github.com/rs/zerolog/log"

	"abodemine/domains/arc"
	"abodemine/lib/distsync"
	"abodemine/lib/errors"
	"abodemine/lib/val"
	"abodemine/projects/datapipe/conf"
)

type Domain interface {
	HandleTaskLauncherLambdaEvent(r *arc.Request, in *HandleTaskLauncherLambdaEventInput) (*HandleTaskLauncherLambdaEventOutput, error)
	ProcessTaskLauncherMessage(r *arc.Request, in *ProcessTaskLauncherMessageInput) (*ProcessTaskLauncherMessageOutput, error)
	ProcessTaskLauncherTask(r *arc.Request, in *ProcessTaskLauncherTaskInput) (*ProcessTaskLauncherTaskOutput, error)
}

type domain struct {
	config *conf.Config
}

type NewDomainInput struct {
	Config *conf.Config
}

func NewDomain(in *NewDomainInput) Domain {
	return &domain{
		config: in.Config,
	}
}

type HandleTaskLauncherLambdaEventInput struct {
	SqsMessages []events.SQSMessage
}

type HandleTaskLauncherLambdaEventOutput struct{}

func (dom *domain) HandleTaskLauncherLambdaEvent(r *arc.Request, in *HandleTaskLauncherLambdaEventInput) (*HandleTaskLauncherLambdaEventOutput, error) {
	switch {
	case dom.config == nil:
		return nil, &errors.Object{
			Id:     "e5c7d0b3-9d4f-4f8e-8a2b-7a6b1a4c2c5f",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.",
		}
	case dom.config.File == nil:
		return nil, &errors.Object{
			Id:     "d92bdf54-e982-4f8d-80a6-23dbaa5a2300",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.",
		}
	case dom.config.File.Lambdas == nil:
		return nil, &errors.Object{
			Id:     "c3bc848f-25c6-4290-a7b0-0d9ebb8d9f9c",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.",
		}
	case dom.config.File.Lambdas.TaskLauncher == nil:
		return nil, &errors.Object{
			Id:     "66ff2f68-fb78-482b-9cdf-24352f958b89",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks == nil:
		return nil, &errors.Object{
			Id:     "96ff690e-619d-4314-8088-0cd882399a06",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.",
		}
	}

	if in == nil {
		return nil, &errors.Object{
			Id:     "af8c2304-d1b2-4055-9529-a75798bc0517",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing input.",
		}
	}

	sqsQueueUrl := dom.config.File.Lambdas.TaskLauncher.SqsQueueUrl

	if sqsQueueUrl == "" {
		return nil, &errors.Object{
			Id:     "57cba8bf-45f2-4690-8a56-3c0ba1c46335",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing SqsQueueUrl.",
		}
	}

	msgCount := len(in.SqsMessages)

	log.Info().
		Int("message_count", msgCount).
		Send()

	out := &HandleTaskLauncherLambdaEventOutput{}

	if msgCount == 0 {
		log.Info().Msg("Nothing to do.")
		return out, nil
	}

	sqsClient := sqs.NewFromConfig(dom.config.AWS.Get("default"))

	// wg := new(sync.WaitGroup)

	for _, msg := range in.SqsMessages {
		_, err := dom.ProcessTaskLauncherMessage(r, &ProcessTaskLauncherMessageInput{
			SqsClient:   sqsClient,
			SqsQueueUrl: sqsQueueUrl,
			Message:     &msg,
		})
		if err != nil {
			return nil, errors.Forward(err, "73430035-d034-4053-a1e9-9e022dce4a57")
		}
	}

	return out, nil
}

type ProcessTaskLauncherMessageInput struct {
	SqsClient   *sqs.Client
	SqsQueueUrl string
	Message     *events.SQSMessage
}

type ProcessTaskLauncherMessageOutput struct{}

func (dom *domain) ProcessTaskLauncherMessage(r *arc.Request, in *ProcessTaskLauncherMessageInput) (*ProcessTaskLauncherMessageOutput, error) {
	msg := in.Message

	defer func() {
		// Remove the message by default, so we can process other messages.
		//
		// These messages are used as tokens to trigger the execution of
		// ECS tasks, and are automatically generated by EventBridge following
		// a cron schedule. There's no need to keep them for retries.
		if _, err := in.SqsClient.DeleteMessage(r.Context(), &sqs.DeleteMessageInput{
			QueueUrl:      &in.SqsQueueUrl,
			ReceiptHandle: &msg.ReceiptHandle,
		}); err != nil {
			log.Error().
				Err(err).
				Msg("Failed to delete message.")
		}
	}()

	if msg.Body == "" {
		return nil, &errors.Object{
			Id:     "505c4f34-436c-4df1-adec-d34fe8f5d406",
			Code:   errors.Code_FAILED_PRECONDITION,
			Detail: "Received message without body.",
			Meta: map[string]any{
				"message": msg,
			},
		}
	}

	taskBody := new(TaskLauncherMessageBody)

	if err := json.Unmarshal([]byte(msg.Body), taskBody); err != nil {
		return nil, &errors.Object{
			Id:     "e3879cac-087f-466c-813b-1d4c05666711",
			Code:   errors.Code_UNKNOWN,
			Detail: "Failed to unmarshal task body.",
			Cause:  err.Error(),
			Meta: map[string]any{
				"message_body": string(msg.Body),
			},
		}
	}

	_, err := dom.ProcessTaskLauncherTask(r, &ProcessTaskLauncherTaskInput{
		Body: taskBody,
	})
	if err != nil {
		return nil, errors.Forward(err, "51abe1ae-b06f-40a9-bedf-f2104c7cf855")
	}

	out := &ProcessTaskLauncherMessageOutput{}

	return out, nil
}

type ProcessTaskLauncherTaskInput struct {
	Body *TaskLauncherMessageBody
}

type ProcessTaskLauncherTaskOutput struct{}

func (dom *domain) ProcessTaskLauncherTask(r *arc.Request, in *ProcessTaskLauncherTaskInput) (*ProcessTaskLauncherTaskOutput, error) {
	log.Info().
		Str("partner", in.Body.Partner).
		Str("task", in.Body.Task).
		Msg("Processing task.")

	var out *ProcessTaskLauncherTaskOutput
	var err error

	switch in.Body.Task {
	case "fetcher":
		out, err = dom.processTaskLauncherFetcherTask(r, in)
	case "loader":
		out, err = dom.processTaskLauncherLoaderTask(r, in)
	case "osloader":
		out, err = dom.processTaskLauncherOsloaderTask(r, in)
	case "synther":
		out, err = dom.processTaskLauncherSyntherTask(r, in)
	default:
		return nil, &errors.Object{
			Id:     "75670630-44f3-4616-a980-821d59e10ee7",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Unknown task.",
			Meta: map[string]any{
				"partner": in.Body.Partner,
				"task":    in.Body.Task,
			},
		}
	}

	if err != nil {
		return nil, errors.Forward(err, "bf47d4c0-98a6-41f6-975c-156d6e704d6b")
	}

	return out, nil
}

func (dom *domain) processTaskLauncherFetcherTask(r *arc.Request, in *ProcessTaskLauncherTaskInput) (*ProcessTaskLauncherTaskOutput, error) {
	switch {
	case dom.config.File.DistributedLockers == nil:
		return nil, &errors.Object{
			Id:     "a447a9d2-900b-4a03-bd6a-62ca20579421",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.DistributedLockers.",
		}
	case len(dom.config.File.DistributedLockers) == 0:
		return nil, &errors.Object{
			Id:     "1f10e839-d501-4a89-b81a-b604dbc5c911",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Empty config.File.DistributedLockers.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Fetcher == nil:
		return nil, &errors.Object{
			Id:     "aa84de54-9ad2-4180-aabf-739d199c4bbc",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Fetcher.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Fetcher.ClusterArn == "":
		return nil, &errors.Object{
			Id:     "b6caf04e-942a-4e81-8758-723833242a5e",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Fetcher.ClusterArn.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Fetcher.ContainerOverrides == nil:
		return nil, &errors.Object{
			Id:     "1b6f2ee6-cc5a-4afd-9984-80be8547a213",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Fetcher.ContainerOverrides.",
		}
	case len(dom.config.File.Lambdas.TaskLauncher.Tasks.Fetcher.ContainerOverrides) == 0:
		return nil, &errors.Object{
			Id:     "adf1984d-d800-4560-8d6f-34138cd49395",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Empty config.File.Lambdas.TaskLauncher.Tasks.Fetcher.ContainerOverrides.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Fetcher.NetworkConfiguration == nil:
		return nil, &errors.Object{
			Id:     "c81e81fa-5e37-47dc-8639-1d12aed82760",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Fetcher.NetworkConfiguration.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Fetcher.NetworkConfiguration.AWSVpcConfiguration == nil:
		return nil, &errors.Object{
			Id:     "8e7d87a3-e714-44a8-8483-e6f0cdbad0d6",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Fetcher.NetworkConfiguration.AWSVpcConfiguration.",
		}
	case len(dom.config.File.Lambdas.TaskLauncher.Tasks.Fetcher.NetworkConfiguration.AWSVpcConfiguration.SecurityGroups) == 0:
		return nil, &errors.Object{
			Id:     "55d8cd41-1b8d-45dd-a0d6-64e9a0c1d4d3",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Empty config.File.Lambdas.TaskLauncher.Tasks.Fetcher.NetworkConfiguration.AWSVpcConfiguration.SecurityGroups.",
		}
	case len(dom.config.File.Lambdas.TaskLauncher.Tasks.Fetcher.NetworkConfiguration.AWSVpcConfiguration.Subnets) == 0:
		return nil, &errors.Object{
			Id:     "4f561f30-b053-461a-91bf-cf4f54e0edd9",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Empty config.File.Lambdas.TaskLauncher.Tasks.Fetcher.NetworkConfiguration.AWSVpcConfiguration.Subnets.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Fetcher.TaskDefinitionArn == "":
		return nil, &errors.Object{
			Id:     "85260d20-3be4-441a-896f-12f0acd68207",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Fetcher.TaskDefinitionArn.",
		}
	}

	distLocker, ok := dom.config.File.DistributedLockers[in.Body.Task]
	if !ok {
		return nil, &errors.Object{
			Id:     "c5bd88bb-d8c4-4c41-9765-40e1ade1a501",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing locker.",
		}
	}

	if distLocker.TableName == "" {
		return nil, &errors.Object{
			Id:     "86b09b27-4eb5-426a-97c3-8b39b30dc5e0",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing locker table name.",
		}
	}

	if distLocker.Keys == nil {
		return nil, &errors.Object{
			Id:     "8d4f33af-c9af-4bec-a64c-9a9fadea4309",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing locker keys.",
		}
	}

	partnerKey, ok := distLocker.Keys[in.Body.Partner]
	if !ok {
		return nil, &errors.Object{
			Id:     "ccc2ccea-381b-4fe8-b9c9-d7afe3070897",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing locker partner key.",
		}
	}

	log.Info().
		Str("lock_key", partnerKey).
		Msg("Checking lock.")

	locker := &distsync.DynamoDB{
		PollInterval: time.Second,
		Client:       dynamodb.NewFromConfig(dom.config.AWS.Get("default")),
		TableName:    distLocker.TableName,
	}

	lockerStatus, err := locker.Status(r.Context(), partnerKey)
	if err != nil {
		return nil, errors.Forward(err, "a4ced6b7-de51-4954-89ac-834ac3f4cca5")
	}

	out := &ProcessTaskLauncherTaskOutput{}

	if lockerStatus.Code == distsync.LockStatusAcquiredRead ||
		lockerStatus.Code == distsync.LockStatusAcquiredWrite {
		log.Info().
			Str("lock_status", lockerStatus.Code.String()).
			Str("reader_expires_at", lockerStatus.ReaderExpiresAt.Format(time.RFC3339)).
			Str("writer_expires_at", lockerStatus.WriterExpiresAt.Format(time.RFC3339)).
			Str("partner", in.Body.Partner).
			Str("task", in.Body.Task).
			Msg("Lock already acquired. Skipping task.")

		return out, nil
	}

	log.Info().
		Str("lock_status", lockerStatus.Code.String()).
		Msg("Lock is available.")

	taskConfig := dom.config.File.Lambdas.TaskLauncher.Tasks.Fetcher

	partnerContainerOverrides, ok := taskConfig.ContainerOverrides[in.Body.Partner]
	if !ok {
		return nil, &errors.Object{
			Id:     "32a297c0-87ee-4ea2-92ba-d6c11a6faba3",
			Code:   errors.Code_FAILED_PRECONDITION,
			Detail: "Missing container overrides.",
			Meta: map[string]any{
				"partner": in.Body.Partner,
				"task":    in.Body.Task,
			},
		}
	}

	var containerOverrides []types.ContainerOverride

	for _, containerOverride := range partnerContainerOverrides {
		environment := make([]types.KeyValuePair, len(containerOverride.Environment))

		for k, v := range containerOverride.Environment {
			environment = append(environment, types.KeyValuePair{
				Name:  &k,
				Value: &v,
			})
		}

		containerOverrides = append(containerOverrides, types.ContainerOverride{
			Command:     containerOverride.Command,
			Environment: environment,
			Name:        &containerOverride.Name,
		})
	}

	ecsClient := ecs.NewFromConfig(dom.config.AWS.Get("default"))

	runTaskInput := &ecs.RunTaskInput{
		Cluster:    &taskConfig.ClusterArn,
		Count:      val.PtrRef(int32(1)),
		LaunchType: types.LaunchTypeFargate,
		NetworkConfiguration: &types.NetworkConfiguration{
			AwsvpcConfiguration: &types.AwsVpcConfiguration{
				AssignPublicIp: val.Ternary(
					taskConfig.NetworkConfiguration.AWSVpcConfiguration.AssignPublicIp,
					types.AssignPublicIpEnabled,
					types.AssignPublicIpDisabled,
				),
				SecurityGroups: taskConfig.NetworkConfiguration.AWSVpcConfiguration.SecurityGroups,
				Subnets:        taskConfig.NetworkConfiguration.AWSVpcConfiguration.Subnets,
			},
		},
		Overrides: &types.TaskOverride{
			ContainerOverrides: containerOverrides,
		},
		TaskDefinition: &taskConfig.TaskDefinitionArn,
	}

	_, err = ecsClient.RunTask(r.Context(), runTaskInput)
	if err != nil {
		return nil, &errors.Object{
			Id:     "2fb4e492-7aee-41c3-b1d2-f883dcfa4870",
			Code:   errors.Code_UNKNOWN,
			Detail: "Failed to run task.",
			Cause:  err.Error(),
		}
	}

	return out, nil
}

func (dom *domain) processTaskLauncherLoaderTask(r *arc.Request, in *ProcessTaskLauncherTaskInput) (*ProcessTaskLauncherTaskOutput, error) {
	switch {
	case dom.config.File.DistributedLockers == nil:
		return nil, &errors.Object{
			Id:     "7fdffd95-280f-4f68-ae58-4b8db3688919",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.DistributedLockers.",
		}
	case len(dom.config.File.DistributedLockers) == 0:
		return nil, &errors.Object{
			Id:     "702471b9-bb6e-496d-9ac1-0bda68469242",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Empty config.File.DistributedLockers.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Loader == nil:
		return nil, &errors.Object{
			Id:     "e8bd83c1-efb7-4fc3-a045-f76bcd10e8df",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Loader.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Loader.ClusterArn == "":
		return nil, &errors.Object{
			Id:     "4a047b1a-b6f4-47c5-8d86-b313e2c3f8c0",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Loader.ClusterArn.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Loader.ContainerOverrides == nil:
		return nil, &errors.Object{
			Id:     "7b2aeafd-f4cc-4c27-9e26-dcb213de8bef",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Loader.ContainerOverrides.",
		}
	case len(dom.config.File.Lambdas.TaskLauncher.Tasks.Loader.ContainerOverrides) == 0:
		return nil, &errors.Object{
			Id:     "389e76a2-7b33-4c49-a7d6-546ca8e12e86",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Empty config.File.Lambdas.TaskLauncher.Tasks.Loader.ContainerOverrides.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Loader.NetworkConfiguration == nil:
		return nil, &errors.Object{
			Id:     "2ca5bedb-5179-44a5-9178-6796a56bcd0a",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Loader.NetworkConfiguration.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Loader.NetworkConfiguration.AWSVpcConfiguration == nil:
		return nil, &errors.Object{
			Id:     "826b33a3-5c42-40cc-8b7c-d6bb1ffd36b4",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Loader.NetworkConfiguration.AWSVpcConfiguration.",
		}
	case len(dom.config.File.Lambdas.TaskLauncher.Tasks.Loader.NetworkConfiguration.AWSVpcConfiguration.SecurityGroups) == 0:
		return nil, &errors.Object{
			Id:     "ad2de446-4af5-423a-9d5f-87ef3e65bb6f",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Empty config.File.Lambdas.TaskLauncher.Tasks.Loader.NetworkConfiguration.AWSVpcConfiguration.SecurityGroups.",
		}
	case len(dom.config.File.Lambdas.TaskLauncher.Tasks.Loader.NetworkConfiguration.AWSVpcConfiguration.Subnets) == 0:
		return nil, &errors.Object{
			Id:     "f5113e4c-9108-413d-a511-32d3d0034198",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Empty config.File.Lambdas.TaskLauncher.Tasks.Loader.NetworkConfiguration.AWSVpcConfiguration.Subnets.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Loader.TaskDefinitionArn == "":
		return nil, &errors.Object{
			Id:     "2504816e-d352-45e4-a264-22a7dfe10854",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Loader.TaskDefinitionArn.",
		}
	}

	distLocker, ok := dom.config.File.DistributedLockers[in.Body.Task]
	if !ok {
		return nil, &errors.Object{
			Id:     "882d2ded-2430-4199-89e9-0ce6c955f760",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing locker.",
		}
	}

	if distLocker.TableName == "" {
		return nil, &errors.Object{
			Id:     "03d8cfca-12fa-439b-ba46-0f0128fae567",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing locker table name.",
		}
	}

	if distLocker.Keys == nil {
		return nil, &errors.Object{
			Id:     "82e7d6a4-83e8-40c3-bfce-a06305ed426d",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing locker keys.",
		}
	}

	partnerKey, ok := distLocker.Keys[in.Body.Partner]
	if !ok {
		return nil, &errors.Object{
			Id:     "3ab10dbe-70d7-427f-9a43-924e6780528b",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing locker partner key.",
		}
	}

	log.Info().
		Str("lock_key", partnerKey).
		Msg("Checking lock.")

	locker := &distsync.DynamoDB{
		PollInterval: time.Second,
		Client:       dynamodb.NewFromConfig(dom.config.AWS.Get("default")),
		TableName:    distLocker.TableName,
	}

	lockerStatus, err := locker.Status(r.Context(), partnerKey)
	if err != nil {
		return nil, errors.Forward(err, "ecbf991c-2de9-49c1-be41-22781fd57e82")
	}

	out := &ProcessTaskLauncherTaskOutput{}

	if lockerStatus.Code == distsync.LockStatusAcquiredRead ||
		lockerStatus.Code == distsync.LockStatusAcquiredWrite {
		log.Info().
			Str("lock_status", lockerStatus.Code.String()).
			Str("reader_expires_at", lockerStatus.ReaderExpiresAt.Format(time.RFC3339)).
			Str("writer_expires_at", lockerStatus.WriterExpiresAt.Format(time.RFC3339)).
			Str("partner", in.Body.Partner).
			Str("task", in.Body.Task).
			Msg("Lock already acquired. Skipping task.")

		return out, nil
	}

	log.Info().
		Str("lock_status", lockerStatus.Code.String()).
		Msg("Lock is available.")

	taskConfig := dom.config.File.Lambdas.TaskLauncher.Tasks.Loader

	partnerContainerOverrides, ok := taskConfig.ContainerOverrides[in.Body.Partner]
	if !ok {
		return nil, &errors.Object{
			Id:     "fb038aab-696d-4b22-800a-3939cf6358fe",
			Code:   errors.Code_FAILED_PRECONDITION,
			Detail: "Missing container overrides.",
			Meta: map[string]any{
				"partner": in.Body.Partner,
				"task":    in.Body.Task,
			},
		}
	}

	var containerOverrides []types.ContainerOverride

	for _, containerOverride := range partnerContainerOverrides {
		environment := make([]types.KeyValuePair, len(containerOverride.Environment))

		for k, v := range containerOverride.Environment {
			environment = append(environment, types.KeyValuePair{
				Name:  &k,
				Value: &v,
			})
		}

		containerOverrides = append(containerOverrides, types.ContainerOverride{
			Command:     containerOverride.Command,
			Environment: environment,
			Name:        &containerOverride.Name,
		})
	}

	ecsClient := ecs.NewFromConfig(dom.config.AWS.Get("default"))

	runTaskInput := &ecs.RunTaskInput{
		Cluster:    &taskConfig.ClusterArn,
		Count:      val.PtrRef(int32(1)),
		LaunchType: types.LaunchTypeFargate,
		NetworkConfiguration: &types.NetworkConfiguration{
			AwsvpcConfiguration: &types.AwsVpcConfiguration{
				AssignPublicIp: val.Ternary(
					taskConfig.NetworkConfiguration.AWSVpcConfiguration.AssignPublicIp,
					types.AssignPublicIpEnabled,
					types.AssignPublicIpDisabled,
				),
				SecurityGroups: taskConfig.NetworkConfiguration.AWSVpcConfiguration.SecurityGroups,
				Subnets:        taskConfig.NetworkConfiguration.AWSVpcConfiguration.Subnets,
			},
		},
		Overrides: &types.TaskOverride{
			ContainerOverrides: containerOverrides,
		},
		TaskDefinition: &taskConfig.TaskDefinitionArn,
	}

	_, err = ecsClient.RunTask(r.Context(), runTaskInput)
	if err != nil {
		return nil, &errors.Object{
			Id:     "3a0f23c2-8735-41a5-b193-d7fdaeabd0c4",
			Code:   errors.Code_UNKNOWN,
			Detail: "Failed to run task.",
			Cause:  err.Error(),
		}
	}

	return out, nil
}

func (dom *domain) processTaskLauncherOsloaderTask(r *arc.Request, in *ProcessTaskLauncherTaskInput) (*ProcessTaskLauncherTaskOutput, error) {
	switch {
	case dom.config.File.DistributedLockers == nil:
		return nil, &errors.Object{
			Id:     "709b7a03-ea64-476c-95e0-3effa7aff4b8",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.DistributedLockers.",
		}
	case len(dom.config.File.DistributedLockers) == 0:
		return nil, &errors.Object{
			Id:     "9110ac3b-704d-4955-8d8f-d9147cb9b5c2",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Empty config.File.DistributedLockers.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Osloader == nil:
		return nil, &errors.Object{
			Id:     "fbe457d6-f58c-4293-bf2a-fc49358e24dd",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Osloader.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Osloader.ClusterArn == "":
		return nil, &errors.Object{
			Id:     "e0ab3439-0995-4a47-a204-cc7456a1bdc5",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Osloader.ClusterArn.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Osloader.ContainerOverrides == nil:
		return nil, &errors.Object{
			Id:     "f2a9c7d1-890d-4fda-af90-8404a8f53505",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Osloader.ContainerOverrides.",
		}
	case len(dom.config.File.Lambdas.TaskLauncher.Tasks.Osloader.ContainerOverrides) == 0:
		return nil, &errors.Object{
			Id:     "3a05e783-68ae-48ad-993d-205f398dc27d",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Empty config.File.Lambdas.TaskLauncher.Tasks.Osloader.ContainerOverrides.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Osloader.NetworkConfiguration == nil:
		return nil, &errors.Object{
			Id:     "d015250f-23aa-49e7-914f-90394445c9fc",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Osloader.NetworkConfiguration.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Osloader.NetworkConfiguration.AWSVpcConfiguration == nil:
		return nil, &errors.Object{
			Id:     "7459abfc-d6f7-4369-8dac-6da3ebdaaf99",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Osloader.NetworkConfiguration.AWSVpcConfiguration.",
		}
	case len(dom.config.File.Lambdas.TaskLauncher.Tasks.Osloader.NetworkConfiguration.AWSVpcConfiguration.SecurityGroups) == 0:
		return nil, &errors.Object{
			Id:     "986587d0-09be-4ce7-a18c-8a65f0d4c7aa",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Empty config.File.Lambdas.TaskLauncher.Tasks.Osloader.NetworkConfiguration.AWSVpcConfiguration.SecurityGroups.",
		}
	case len(dom.config.File.Lambdas.TaskLauncher.Tasks.Osloader.NetworkConfiguration.AWSVpcConfiguration.Subnets) == 0:
		return nil, &errors.Object{
			Id:     "ddb84e09-857f-473a-83ef-764b583ea26a",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Empty config.File.Lambdas.TaskLauncher.Tasks.Osloader.NetworkConfiguration.AWSVpcConfiguration.Subnets.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Osloader.TaskDefinitionArn == "":
		return nil, &errors.Object{
			Id:     "af340b55-39e7-4574-8356-3c6e600ed0ad",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Osloader.TaskDefinitionArn.",
		}
	}

	distLocker, ok := dom.config.File.DistributedLockers[in.Body.Task]
	if !ok {
		return nil, &errors.Object{
			Id:     "abc3988c-98ab-4a76-a8c4-91de1ab05a7e",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing locker.",
		}
	}

	if distLocker.TableName == "" {
		return nil, &errors.Object{
			Id:     "cfd0366d-7906-4aa2-9cb2-a1c54ee66891",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing locker table name.",
		}
	}

	if distLocker.Keys == nil {
		return nil, &errors.Object{
			Id:     "d38e21fb-717b-4f8e-b3a7-8e3cd05a83ec",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing locker keys.",
		}
	}

	partnerKey, ok := distLocker.Keys[in.Body.Partner]
	if !ok {
		return nil, &errors.Object{
			Id:     "e259d370-bab3-411f-a193-8572ce5bd16f",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing locker partner key.",
		}
	}

	log.Info().
		Str("lock_key", partnerKey).
		Msg("Checking lock.")

	locker := &distsync.DynamoDB{
		PollInterval: time.Second,
		Client:       dynamodb.NewFromConfig(dom.config.AWS.Get("default")),
		TableName:    distLocker.TableName,
	}

	lockerStatus, err := locker.Status(r.Context(), partnerKey)
	if err != nil {
		return nil, errors.Forward(err, "f8775642-5632-48f1-bf85-46e96f7291d8")
	}

	out := &ProcessTaskLauncherTaskOutput{}

	if lockerStatus.Code == distsync.LockStatusAcquiredRead ||
		lockerStatus.Code == distsync.LockStatusAcquiredWrite {
		log.Info().
			Str("lock_status", lockerStatus.Code.String()).
			Str("reader_expires_at", lockerStatus.ReaderExpiresAt.Format(time.RFC3339)).
			Str("writer_expires_at", lockerStatus.WriterExpiresAt.Format(time.RFC3339)).
			Str("partner", in.Body.Partner).
			Str("task", in.Body.Task).
			Msg("Lock already acquired. Skipping task.")

		return out, nil
	}

	log.Info().
		Str("lock_status", lockerStatus.Code.String()).
		Msg("Lock is available.")

	taskConfig := dom.config.File.Lambdas.TaskLauncher.Tasks.Osloader

	partnerContainerOverrides, ok := taskConfig.ContainerOverrides[in.Body.Partner]
	if !ok {
		return nil, &errors.Object{
			Id:     "1fd70b97-b2ec-455a-9099-a8f16a385b91",
			Code:   errors.Code_FAILED_PRECONDITION,
			Detail: "Missing container overrides.",
			Meta: map[string]any{
				"partner": in.Body.Partner,
				"task":    in.Body.Task,
			},
		}
	}

	var containerOverrides []types.ContainerOverride

	for _, containerOverride := range partnerContainerOverrides {
		environment := make([]types.KeyValuePair, len(containerOverride.Environment))

		for k, v := range containerOverride.Environment {
			environment = append(environment, types.KeyValuePair{
				Name:  &k,
				Value: &v,
			})
		}

		containerOverrides = append(containerOverrides, types.ContainerOverride{
			Command:     containerOverride.Command,
			Environment: environment,
			Name:        &containerOverride.Name,
		})
	}

	ecsClient := ecs.NewFromConfig(dom.config.AWS.Get("default"))

	runTaskInput := &ecs.RunTaskInput{
		Cluster:    &taskConfig.ClusterArn,
		Count:      val.PtrRef(int32(1)),
		LaunchType: types.LaunchTypeFargate,
		NetworkConfiguration: &types.NetworkConfiguration{
			AwsvpcConfiguration: &types.AwsVpcConfiguration{
				AssignPublicIp: val.Ternary(
					taskConfig.NetworkConfiguration.AWSVpcConfiguration.AssignPublicIp,
					types.AssignPublicIpEnabled,
					types.AssignPublicIpDisabled,
				),
				SecurityGroups: taskConfig.NetworkConfiguration.AWSVpcConfiguration.SecurityGroups,
				Subnets:        taskConfig.NetworkConfiguration.AWSVpcConfiguration.Subnets,
			},
		},
		Overrides: &types.TaskOverride{
			ContainerOverrides: containerOverrides,
		},
		TaskDefinition: &taskConfig.TaskDefinitionArn,
	}

	_, err = ecsClient.RunTask(r.Context(), runTaskInput)
	if err != nil {
		return nil, &errors.Object{
			Id:     "75997f75-2faa-4699-afcf-31f71499d647",
			Code:   errors.Code_UNKNOWN,
			Detail: "Failed to run task.",
			Cause:  err.Error(),
		}
	}

	return out, nil
}

func (dom *domain) processTaskLauncherSyntherTask(r *arc.Request, in *ProcessTaskLauncherTaskInput) (*ProcessTaskLauncherTaskOutput, error) {
	switch {
	case dom.config.File.DistributedLockers == nil:
		return nil, &errors.Object{
			Id:     "63feecfb-69bb-4562-a926-e58935094001",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.DistributedLockers.",
		}
	case len(dom.config.File.DistributedLockers) == 0:
		return nil, &errors.Object{
			Id:     "11bdd1aa-e58b-43cb-877e-d040e3567c96",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Empty config.File.DistributedLockers.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Synther == nil:
		return nil, &errors.Object{
			Id:     "77fb076c-8186-47dd-bc30-1a0f512d4c34",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Synther.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Synther.ClusterArn == "":
		return nil, &errors.Object{
			Id:     "b82dbd58-7ce9-4c6d-9ba9-91bfa35b8fde",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Synther.ClusterArn.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Synther.ContainerOverrides == nil:
		return nil, &errors.Object{
			Id:     "f6840ef6-0f8f-434d-87ea-b4d9cf1dfa15",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Synther.ContainerOverrides.",
		}
	case len(dom.config.File.Lambdas.TaskLauncher.Tasks.Synther.ContainerOverrides) == 0:
		return nil, &errors.Object{
			Id:     "64b8cc3b-b76b-4d97-b91c-54a039f6f77d",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Empty config.File.Lambdas.TaskLauncher.Tasks.Synther.ContainerOverrides.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Synther.NetworkConfiguration == nil:
		return nil, &errors.Object{
			Id:     "547c4032-ed8c-4bd4-ae00-b085d613d7a6",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Synther.NetworkConfiguration.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Synther.NetworkConfiguration.AWSVpcConfiguration == nil:
		return nil, &errors.Object{
			Id:     "70307a5c-518b-42a6-8c89-de3b26abf08b",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Synther.NetworkConfiguration.AWSVpcConfiguration.",
		}
	case len(dom.config.File.Lambdas.TaskLauncher.Tasks.Synther.NetworkConfiguration.AWSVpcConfiguration.SecurityGroups) == 0:
		return nil, &errors.Object{
			Id:     "1cf777d7-ba7c-495c-8c13-243d90411217",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Empty config.File.Lambdas.TaskLauncher.Tasks.Synther.NetworkConfiguration.AWSVpcConfiguration.SecurityGroups.",
		}
	case len(dom.config.File.Lambdas.TaskLauncher.Tasks.Synther.NetworkConfiguration.AWSVpcConfiguration.Subnets) == 0:
		return nil, &errors.Object{
			Id:     "ef9f9f40-6e5c-4703-ab7c-b502f67d0f42",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Empty config.File.Lambdas.TaskLauncher.Tasks.Synther.NetworkConfiguration.AWSVpcConfiguration.Subnets.",
		}
	case dom.config.File.Lambdas.TaskLauncher.Tasks.Synther.TaskDefinitionArn == "":
		return nil, &errors.Object{
			Id:     "1fac62f0-15c1-4327-b9fd-9213c580d446",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing config.File.Lambdas.TaskLauncher.Tasks.Synther.TaskDefinitionArn.",
		}
	}

	distLocker, ok := dom.config.File.DistributedLockers[in.Body.Task]
	if !ok {
		return nil, &errors.Object{
			Id:     "a8480de8-83a1-4983-9097-3604bc804d36",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing locker.",
		}
	}

	if distLocker.TableName == "" {
		return nil, &errors.Object{
			Id:     "31ec67d4-7af8-40d2-8bd6-b08cb9f95841",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing locker table name.",
		}
	}

	if distLocker.Keys == nil {
		return nil, &errors.Object{
			Id:     "1b16d187-3020-41df-ab42-ed493e3968cb",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing locker keys.",
		}
	}

	partnerKey, ok := distLocker.Keys[in.Body.Partner]
	if !ok {
		return nil, &errors.Object{
			Id:     "ca97340c-eb56-4fc8-8743-43e9296ae1c6",
			Code:   errors.Code_INVALID_ARGUMENT,
			Detail: "Missing locker partner key.",
		}
	}

	log.Info().
		Str("lock_key", partnerKey).
		Msg("Checking lock.")

	locker := &distsync.DynamoDB{
		PollInterval: time.Second,
		Client:       dynamodb.NewFromConfig(dom.config.AWS.Get("default")),
		TableName:    distLocker.TableName,
	}

	lockerStatus, err := locker.Status(r.Context(), partnerKey)
	if err != nil {
		return nil, errors.Forward(err, "6d6efe63-2e91-45ed-800f-a17f1025e4e3")
	}

	out := &ProcessTaskLauncherTaskOutput{}

	if lockerStatus.Code == distsync.LockStatusAcquiredRead ||
		lockerStatus.Code == distsync.LockStatusAcquiredWrite {
		log.Info().
			Str("lock_status", lockerStatus.Code.String()).
			Str("reader_expires_at", lockerStatus.ReaderExpiresAt.Format(time.RFC3339)).
			Str("writer_expires_at", lockerStatus.WriterExpiresAt.Format(time.RFC3339)).
			Str("partner", in.Body.Partner).
			Str("task", in.Body.Task).
			Msg("Lock already acquired. Skipping task.")

		return out, nil
	}

	log.Info().
		Str("lock_status", lockerStatus.Code.String()).
		Msg("Lock is available.")

	taskConfig := dom.config.File.Lambdas.TaskLauncher.Tasks.Synther

	partnerContainerOverrides, ok := taskConfig.ContainerOverrides[in.Body.Partner]
	if !ok {
		return nil, &errors.Object{
			Id:     "d471bb1a-c2c2-4678-8fac-a8ec7b2cb072",
			Code:   errors.Code_FAILED_PRECONDITION,
			Detail: "Missing container overrides.",
			Meta: map[string]any{
				"partner": in.Body.Partner,
				"task":    in.Body.Task,
			},
		}
	}

	var containerOverrides []types.ContainerOverride

	for _, containerOverride := range partnerContainerOverrides {
		environment := make([]types.KeyValuePair, len(containerOverride.Environment))

		for k, v := range containerOverride.Environment {
			environment = append(environment, types.KeyValuePair{
				Name:  &k,
				Value: &v,
			})
		}

		containerOverrides = append(containerOverrides, types.ContainerOverride{
			Command:     containerOverride.Command,
			Environment: environment,
			Name:        &containerOverride.Name,
		})
	}

	ecsClient := ecs.NewFromConfig(dom.config.AWS.Get("default"))

	runTaskInput := &ecs.RunTaskInput{
		Cluster:    &taskConfig.ClusterArn,
		Count:      val.PtrRef(int32(1)),
		LaunchType: types.LaunchTypeFargate,
		NetworkConfiguration: &types.NetworkConfiguration{
			AwsvpcConfiguration: &types.AwsVpcConfiguration{
				AssignPublicIp: val.Ternary(
					taskConfig.NetworkConfiguration.AWSVpcConfiguration.AssignPublicIp,
					types.AssignPublicIpEnabled,
					types.AssignPublicIpDisabled,
				),
				SecurityGroups: taskConfig.NetworkConfiguration.AWSVpcConfiguration.SecurityGroups,
				Subnets:        taskConfig.NetworkConfiguration.AWSVpcConfiguration.Subnets,
			},
		},
		Overrides: &types.TaskOverride{
			ContainerOverrides: containerOverrides,
		},
		TaskDefinition: &taskConfig.TaskDefinitionArn,
	}

	_, err = ecsClient.RunTask(r.Context(), runTaskInput)
	if err != nil {
		return nil, &errors.Object{
			Id:     "4d0eab4b-53db-4361-81e3-6679b11973f4",
			Code:   errors.Code_UNKNOWN,
			Detail: "Failed to run task.",
			Cause:  err.Error(),
		}
	}

	return out, nil
}
