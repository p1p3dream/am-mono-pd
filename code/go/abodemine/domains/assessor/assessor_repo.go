package assessor

import (
	"github.com/Masterminds/squirrel"
	"github.com/google/uuid"

	"abodemine/domains/arc"
	"abodemine/entities"
	"abodemine/lib/consts"
	"abodemine/lib/errors"
	"abodemine/lib/extutils"
)

type Repository interface {
	SelectAssessorRecord(r *arc.Request, in *SelectAssessorRecordInput) (*SelectAssessorRecordOutput, error)
}

type repository struct{}

func NewRepository() Repository {
	return &repository{}
}

type SelectAssessorRecordInput struct {
	Aupid *uuid.UUID
}

type SelectAssessorRecordOutput struct {
	Records []*entities.Assessor
}

func (repo *repository) SelectAssessorRecord(r *arc.Request, in *SelectAssessorRecordInput) (*SelectAssessorRecordOutput, error) {
	builder := squirrel.StatementBuilder.
		PlaceholderFormat(squirrel.Dollar).
		Select(
			// AD fields.
			"ad_df_assessor.situs_county",
			"ad_df_assessor.property_jurisdiction_name",
			"ad_df_assessor.census_fips_place_code",
			"ad_df_assessor.combined_statistical_area",
			"ad_df_assessor.cbsa_name",
			"ad_df_assessor.cbsa_code",
			"ad_df_assessor.msa_name",
			"ad_df_assessor.msa_code",
			"ad_df_assessor.metropolitan_division",
			"ad_df_assessor.minor_civil_division_name",
			"ad_df_assessor.minor_civil_division_code",
			"ad_df_assessor.neighborhood_code",
			"ad_df_assessor.census_block_group",
			"CASE WHEN ad_df_assessor.trust_description = 'Name is a Trust' THEN true ELSE false END AS trust_description",
			"ad_df_assessor.owner_type_description1",
			"ad_df_assessor.party_owner3name_full",
			"ad_df_assessor.party_owner3name_first",
			"ad_df_assessor.party_owner3name_middle",
			"ad_df_assessor.party_owner3name_last",
			"ad_df_assessor.party_owner3name_suffix",
			"ad_df_assessor.party_owner4name_full",
			"ad_df_assessor.party_owner4name_first",
			"ad_df_assessor.party_owner4name_middle",
			"ad_df_assessor.party_owner4name_last",
			"ad_df_assessor.party_owner4name_suffix",
			"ad_df_assessor.contact_owner_mailing_county",
			"ad_df_assessor.contact_owner_mailing_fips",
			"ad_df_assessor.contact_owner_mail_address_info_format",
			"ad_df_assessor.tax_assessed_improvements_perc",
			"ad_df_assessor.tax_market_improvements_perc",
			"ad_df_assessor.previous_assessed_value",
			"ad_df_assessor.area2nd_floor",
			"ad_df_assessor.area_upper_floors",
			"ad_df_assessor.rooms_attic_flag",
			"ad_df_assessor.buildings_count",
			"ad_df_assessor.parking_carport_area",
			"ad_df_assessor.foundation",
			"ad_df_assessor.view_description",
			"ad_df_assessor.guest_house_area",
			"ad_df_assessor.shed_area",
			"ad_df_assessor.deck_area",
			"ad_df_assessor.fireplace",
			"ad_df_assessor.parking_carport",
			"ad_df_assessor.driveway_area",
			"ad_df_assessor.patio_area",
			"ad_df_assessor.balcony_area",
			"ad_df_assessor.courtyard_area",
			"ad_df_assessor.canopy_area",
			"ad_df_assessor.gazebo_area",
			"ad_df_assessor.pool_area",
			"ad_df_assessor.legal_lot_number2",
			"ad_df_assessor.legal_lot_number3",
			"ad_df_assessor.legal_block2",
			"ad_df_assessor.deed_last_sale_transaction_id",
			"ad_df_assessor.last_ownership_transfer_date",
			"ad_df_assessor.last_ownership_transfer_document_number",
			"ad_df_assessor.last_ownership_transfer_transaction_id",
			"ad_df_assessor.assessor_last_sale_amount",
			// FA fields.
			"fa_df_assessor.fips",
			"fa_df_assessor.apn",
			"fa_df_assessor.apn_seq_nbr",
			"fa_df_assessor.tax_account_number",
			"fa_df_assessor.situs_full_street_address",
			"fa_df_assessor.situs_house_nbr",
			"fa_df_assessor.situs_house_nbr_suffix",
			"fa_df_assessor.situs_direction_left",
			"fa_df_assessor.situs_street",
			"fa_df_assessor.situs_mode",
			"fa_df_assessor.situs_direction_right",
			"fa_df_assessor.situs_unit_type",
			"fa_df_assessor.situs_unit_nbr",
			"fa_df_assessor.situs_city",
			"fa_df_assessor.situs_state",
			"fa_df_assessor.situs_zip5",
			"fa_df_assessor.situs_zip4",
			"fa_df_assessor.situs_carrier_code",
			"fa_df_assessor.situs_latitude",
			"fa_df_assessor.situs_longitude",
			"fa_df_assessor.situs_geo_status_code",
			"fa_df_assessor.property_class_id",
			"fa_df_assessor.land_use_code",
			"fa_df_assessor.state_land_use_code",
			"fa_df_assessor.county_land_use_code",
			"fa_df_assessor.zoning",
			"fa_df_assessor.situs_census_tract",
			"fa_df_assessor.situs_census_block",
			"fa_df_assessor.mobile_home_ind",
			"fa_df_assessor.timeshare_code",
			"fa_df_assessor.school_district_name",
			"fa_df_assessor.lot_size_frontage_feet",
			"fa_df_assessor.lot_size_depth_feet",
			"fa_df_assessor.lot_size_acres",
			"fa_df_assessor.lot_size_sq_ft",
			"fa_df_assessor.owner1corp_ind",
			"fa_df_assessor.owner1last_name",
			"fa_df_assessor.owner1first_name",
			"fa_df_assessor.owner1middle_name",
			"fa_df_assessor.owner1suffix",
			"fa_df_assessor.owner2corp_ind",
			"fa_df_assessor.owner2last_name",
			"fa_df_assessor.owner2first_name",
			"fa_df_assessor.owner2middle_name",
			"fa_df_assessor.owner2suffix",
			"fa_df_assessor.owner_name1full",
			"fa_df_assessor.owner_name2full",
			"fa_df_assessor.owner_occupied",
			"fa_df_assessor.owner1ownership_rights",
			"fa_df_assessor.mailing_full_street_address",
			"fa_df_assessor.mailing_house_nbr",
			"fa_df_assessor.mailing_house_nbr_suffix",
			"fa_df_assessor.mailing_direction_left",
			"fa_df_assessor.mailing_street",
			"fa_df_assessor.mailing_mode",
			"fa_df_assessor.mailing_direction_right",
			"fa_df_assessor.mailing_unit_type",
			"fa_df_assessor.mailing_unit_nbr",
			"fa_df_assessor.mailing_city",
			"fa_df_assessor.mailing_state",
			"fa_df_assessor.mailing_zip5",
			"fa_df_assessor.mailing_zip4",
			"fa_df_assessor.mailing_carrier_code",
			"fa_df_assessor.mailing_opt_out",
			"fa_df_assessor.mailing_co_name",
			"fa_df_assessor.mailing_foreign_address_ind",
			"fa_df_assessor.assd_total_value",
			"fa_df_assessor.assd_land_value",
			"fa_df_assessor.assd_improvement_value",
			"fa_df_assessor.market_total_value",
			"fa_df_assessor.market_value_land",
			"fa_df_assessor.market_value_improvement",
			"fa_df_assessor.tax_amt",
			"fa_df_assessor.tax_year",
			"fa_df_assessor.tax_deliquent_year",
			"fa_df_assessor.market_year",
			"fa_df_assessor.assd_year",
			"fa_df_assessor.tax_rate_code_area",
			"fa_df_assessor.school_tax_district1code",
			"fa_df_assessor.school_tax_district2code",
			"fa_df_assessor.school_tax_district3code",
			"fa_df_assessor.homestead_ind",
			"fa_df_assessor.veteran_ind",
			"fa_df_assessor.disabled_ind",
			"fa_df_assessor.widow_ind",
			"fa_df_assessor.senior_ind",
			"fa_df_assessor.school_college_ind",
			"fa_df_assessor.religious_ind",
			"fa_df_assessor.welfare_ind",
			"fa_df_assessor.public_utility_ind",
			"fa_df_assessor.cemetery_ind",
			"fa_df_assessor.hospital_ind",
			"fa_df_assessor.library_ind",
			"fa_df_assessor.building_area",
			"fa_df_assessor.building_area_ind",
			"fa_df_assessor.sum_building_sq_ft",
			"fa_df_assessor.sum_living_area_sq_ft",
			"fa_df_assessor.sum_ground_floor_sq_ft",
			"fa_df_assessor.sum_gross_area_sq_ft",
			"fa_df_assessor.sum_adj_area_sq_ft",
			"fa_df_assessor.attic_sq_ft",
			"fa_df_assessor.attic_unfinished_sq_ft",
			"fa_df_assessor.attic_finished_sq_ft",
			"fa_df_assessor.sum_basement_sq_ft",
			"fa_df_assessor.basement_unfinished_sq_ft",
			"fa_df_assessor.basement_finished_sq_ft",
			"fa_df_assessor.sum_garage_sq_ft",
			"fa_df_assessor.garage_un_finished_sq_ft",
			"fa_df_assessor.garage_finished_sq_ft",
			"fa_df_assessor.year_built",
			"fa_df_assessor.effective_year_built",
			"fa_df_assessor.bedrooms",
			"fa_df_assessor.total_rooms",
			"fa_df_assessor.bath_total_calc",
			"fa_df_assessor.bath_full",
			"fa_df_assessor.baths_partial_nbr",
			"fa_df_assessor.bath_fixtures_nbr",
			"fa_df_assessor.amenities",
			"fa_df_assessor.air_conditioning_code",
			"fa_df_assessor.basement_code",
			"fa_df_assessor.building_class_code",
			"fa_df_assessor.building_condition_code",
			"fa_df_assessor.construction_type_code",
			"fa_df_assessor.deck_ind",
			"fa_df_assessor.exterior_walls_code",
			"fa_df_assessor.interior_walls_code",
			"fa_df_assessor.fireplace_code",
			"fa_df_assessor.floor_cover_code",
			"fa_df_assessor.garage",
			"fa_df_assessor.heat_code",
			"fa_df_assessor.heating_fuel_type_code",
			"fa_df_assessor.site_influence_code",
			"fa_df_assessor.garage_parking_nbr",
			"fa_df_assessor.driveway_code",
			"fa_df_assessor.other_rooms",
			"fa_df_assessor.patio_code",
			"fa_df_assessor.pool_code",
			"fa_df_assessor.porch_code",
			"fa_df_assessor.building_quality_code",
			"fa_df_assessor.roof_cover_code",
			"fa_df_assessor.roof_type_code",
			"fa_df_assessor.sewer_code",
			"fa_df_assessor.stories_nbr_code",
			"fa_df_assessor.style_code",
			"fa_df_assessor.sum_residential_units",
			"fa_df_assessor.sum_buildings_nbr",
			"fa_df_assessor.sum_commercial_units",
			"fa_df_assessor.topography_code",
			"fa_df_assessor.water_code",
			"fa_df_assessor.lot_code",
			"fa_df_assessor.lot_nbr",
			"fa_df_assessor.land_lot",
			"fa_df_assessor.block",
			"fa_df_assessor.section",
			"fa_df_assessor.district",
			"fa_df_assessor.legal_unit",
			"fa_df_assessor.municipality",
			"fa_df_assessor.subdivision_name",
			"fa_df_assessor.subdivision_phase_nbr",
			"fa_df_assessor.subdivision_tract_nbr",
			"fa_df_assessor.meridian",
			"fa_df_assessor.assessors_map_ref",
			"fa_df_assessor.legal_description",
			"fa_df_assessor.current_sale_transaction_id",
			"fa_df_assessor.current_sale_doc_nbr",
			"fa_df_assessor.current_sale_book",
			"fa_df_assessor.current_sale_page",
			"fa_df_assessor.current_sale_recording_date",
			"fa_df_assessor.current_sale_contract_date",
			"fa_df_assessor.current_sale_document_type",
			"fa_df_assessor.current_sales_price",
			"fa_df_assessor.current_sales_price_code",
			"fa_df_assessor.current_sale_buyer1full_name",
			"fa_df_assessor.current_sale_buyer2full_name",
			"fa_df_assessor.current_sale_seller1full_name",
			"fa_df_assessor.current_sale_seller2full_name",
			"fa_df_assessor.prev_sale_transaction_id",
			"fa_df_assessor.prev_sale_doc_nbr",
			"fa_df_assessor.prev_sale_book",
			"fa_df_assessor.prev_sale_page",
			"fa_df_assessor.prev_sale_recording_date",
			"fa_df_assessor.prev_sale_contract_date",
			"fa_df_assessor.prev_sale_document_type",
			"fa_df_assessor.prev_sales_price",
			"fa_df_assessor.prev_sales_price_code",
			"fa_df_assessor.prev_sale_buyer1full_name",
			"fa_df_assessor.prev_sale_buyer2full_name",
			"fa_df_assessor.prev_sale_seller1full_name",
			"fa_df_assessor.prev_sale_seller2full_name",
		).
		From("properties").
		Join("fa_df_assessor on properties.fa_property_id = fa_df_assessor.property_id").
		LeftJoin("ad_df_assessor on properties.ad_attom_id = ad_df_assessor.attomid").
		Where("properties.id = ?", in.Aupid)

	sql, args, err := builder.ToSql()
	if err != nil {
		return nil, &errors.Object{
			Id:     "bc3c0a51-c82d-410f-b317-2daece0504a3",
			Code:   errors.Code_UNKNOWN,
			Detail: "Failed to build SQL.",
			Cause:  err.Error(),
		}
	}

	rows, err := extutils.PgxQuery(r, consts.ConfigKeyPostgresDatapipe, sql, args)
	if err != nil {
		return nil, errors.Forward(err, "00454d0f-a0f3-4a11-b9b7-d5463fa08bec")
	}
	defer rows.Close()

	out := &SelectAssessorRecordOutput{}

	for rows.Next() {
		record := &entities.Assessor{}

		if err := rows.Scan(
			&record.County,
			&record.PropertyJurisdictionName,
			&record.CensusFipsPlaceCode,
			&record.CombinedStatisticalArea,
			&record.CbsaName,
			&record.CbsaCode,
			&record.MsaName,
			&record.MsaCode,
			&record.MetropolitanDivision,
			&record.MinorCivilDivisionName,
			&record.MinorCivilDivisionCode,
			&record.NeighborhoodCode,
			&record.CensusBlockGroup,
			&record.IsOwner1Trust,
			&record.Owner1TypeDescription,
			&record.Owner3FullName,
			&record.Owner3FirstName,
			&record.Owner3MiddleName,
			&record.Owner3LastName,
			&record.Owner3Suffix,
			&record.Owner4FullName,
			&record.Owner4FirstName,
			&record.Owner4MiddleName,
			&record.Owner4LastName,
			&record.Owner4Suffix,
			&record.MailingCounty,
			&record.MailingFips,
			&record.MailAddressInfoFormat,
			&record.TaxAssessedImprovementsPerc,
			&record.TaxMarketImprovementsPerc,
			&record.PreviousAssessedValue,
			&record.Area2ndFloor,
			&record.AreaUpperFloors,
			&record.HasRoomsAttic,
			&record.BuildingsCount,
			&record.ParkingCarportArea,
			&record.Foundation,
			&record.ViewDescription,
			&record.GuestHouseArea,
			&record.ShedArea,
			&record.DeckArea,
			&record.HasFireplace,
			&record.ParkingCarport,
			&record.DrivewayArea,
			&record.PatioArea,
			&record.BalconyArea,
			&record.CourtyardArea,
			&record.CanopyArea,
			&record.GazeboArea,
			&record.PoolArea,
			&record.LegalLotNumber2,
			&record.LegalLotNumber3,
			&record.Block2,
			&record.DeedLastSaleTransactionId,
			&record.LastOwnershipTransferDate,
			&record.LastOwnershipTransferDocumentNumber,
			&record.LastOwnershipTransferTransactionId,
			&record.AssessorLastSaleAmount,
			&record.Fips,
			&record.Apn,
			&record.ApnSeqNbr,
			&record.TaxAccountNumber,
			&record.FullStreetAddress,
			&record.HouseNumber,
			&record.HouseNumberSuffix,
			&record.StreetPreDirection,
			&record.StreetName,
			&record.StreetSuffix,
			&record.StreetPostDirection,
			&record.UnitType,
			&record.UnitNumber,
			&record.City,
			&record.State,
			&record.Zip5,
			&record.Zip4,
			&record.CarrierCode,
			&record.Latitude,
			&record.Longitude,
			&record.GeoStatusCode,
			&record.PropertyClassId,
			&record.LandUseCode,
			&record.StateLandUseCode,
			&record.CountyLandUseCode,
			&record.Zoning,
			&record.CensusTract,
			&record.CensusBlock,
			&record.HasMobileHome,
			&record.IsTimeShare,
			&record.SchoolDistrictName,
			&record.LotSizeFrontageFeet,
			&record.LotSizeDepthFeet,
			&record.LotSizeAcres,
			&record.LotSizeSqFt,
			&record.IsOwner1Corp,
			&record.Owner1LastName,
			&record.Owner1FirstName,
			&record.Owner1MiddleName,
			&record.Owner1Suffix,
			&record.IsOwner2Corp,
			&record.Owner2LastName,
			&record.Owner2FirstName,
			&record.Owner2MiddleName,
			&record.Owner2Suffix,
			&record.Owner1FullName,
			&record.Owner2FullName,
			&record.OwnerOccupied,
			&record.Owner1OwnershipRights,
			&record.MailingFullStreetAddress,
			&record.MailingHouseNumber,
			&record.MailingHouseNumberSuffix,
			&record.MailingStreetPreDirection,
			&record.MailingStreet,
			&record.MailingStreetSuffix,
			&record.MailingStreetPostDirection,
			&record.MailingUnitType,
			&record.MailingUnitNumber,
			&record.MailingCity,
			&record.MailingState,
			&record.MailingZip5,
			&record.MailingZip4,
			&record.MailingCarrierCode,
			&record.MailingOptOut,
			&record.MailingCoName,
			&record.IsMailingForeignAddress,
			&record.AssessedTotalValue,
			&record.AssessedLandValue,
			&record.AssessedImprovementValue,
			&record.MarketTotalValue,
			&record.MarketValueLand,
			&record.MarketValueImprovement,
			&record.TaxAmount,
			&record.TaxYear,
			&record.TaxDeliquentYear,
			&record.MarketYear,
			&record.AssessedYear,
			&record.TaxRateCodeArea,
			&record.SchoolTaxDistrict1Code,
			&record.SchoolTaxDistrict2Code,
			&record.SchoolTaxDistrict3Code,
			&record.HasTaxExemptionHomeowner,
			&record.HasTaxExemptionVeteran,
			&record.HasTaxExemptionDisabled,
			&record.HasTaxExemptionWidow,
			&record.HasTaxExemptionSenior,
			&record.HasTaxExemptionSchoolCollege,
			&record.HasTaxExemptionReligious,
			&record.HasTaxExemptionWelfare,
			&record.HasTaxExemptionPublicUtility,
			&record.HasTaxExemptionCemetery,
			&record.HasTaxExemptionHospital,
			&record.HasTaxExemptionLibrary,
			&record.BuildingArea,
			&record.BuildingAreaType,
			&record.SumBuildingSqFt,
			&record.SumLivingAreaSqFt,
			&record.SumGroundFloorSqFt,
			&record.SumGrossAreaSqFt,
			&record.SumAdjAreaSqFt,
			&record.AtticSqFt,
			&record.AtticUnfinishedSqFt,
			&record.AtticFinishedSqFt,
			&record.SumBasementSqFt,
			&record.BasementUnfinishedSqFt,
			&record.BasementFinishedSqFt,
			&record.SumGarageSqFt,
			&record.GarageUnfinishedSqFt,
			&record.GarageFinishedSqFt,
			&record.YearBuilt,
			&record.EffectiveYearBuilt,
			&record.Bedrooms,
			&record.TotalRooms,
			&record.BathTotalCalc,
			&record.BathFull,
			&record.BathsPartialNbr,
			&record.BathFixturesNbr,
			&record.Amenities,
			&record.AirConditioningCode,
			&record.BasementCode,
			&record.BuildingClassCode,
			&record.BuildingConditionCode,
			&record.ConstructionTypeCode,
			&record.HasDeck,
			&record.ExteriorWallsCode,
			&record.InteriorWallsCode,
			&record.FireplaceCode,
			&record.FloorCoverCode,
			&record.Garage,
			&record.HeatCode,
			&record.HeatingFuelTypeCode,
			&record.SiteInfluenceCode,
			&record.GarageParkingNbr,
			&record.DrivewayCode,
			&record.OtherRooms,
			&record.PatioCode,
			&record.PoolCode,
			&record.PorchCode,
			&record.BuildingQualityCode,
			&record.RoofCoverCode,
			&record.RoofTypeCode,
			&record.SewerCode,
			&record.StoriesNbrCode,
			&record.StyleCode,
			&record.SumResidentialUnits,
			&record.SumBuildingsNbr,
			&record.SumCommercialUnits,
			&record.TopographyCode,
			&record.WaterCode,
			&record.LotCode,
			&record.LotNbr,
			&record.LandLot,
			&record.Block,
			&record.Section,
			&record.District,
			&record.LegalUnit,
			&record.Municipality,
			&record.SubdivisionName,
			&record.SubdivisionPhaseNbr,
			&record.SubdivisionTractNbr,
			&record.Meridian,
			&record.AssessorsMapRef,
			&record.LegalDescription,
			&record.CurrentSaleTransactionId,
			&record.CurrentSaleDocNbr,
			&record.CurrentSaleBook,
			&record.CurrentSalePage,
			&record.CurrentSaleRecordingDate,
			&record.CurrentSaleContractDate,
			&record.CurrentSaleDocumentType,
			&record.CurrentSalesPrice,
			&record.CurrentSalesPriceCode,
			&record.CurrentSaleBuyer1FullName,
			&record.CurrentSaleBuyer2FullName,
			&record.CurrentSaleSeller1FullName,
			&record.CurrentSaleSeller2FullName,
			&record.PrevSaleTransactionId,
			&record.PrevSaleDocNbr,
			&record.PrevSaleBook,
			&record.PrevSalePage,
			&record.PrevSaleRecordingDate,
			&record.PrevSaleContractDate,
			&record.PrevSaleDocumentType,
			&record.PrevSalesPrice,
			&record.PrevSalesPriceCode,
			&record.PrevSaleBuyer1FullName,
			&record.PrevSaleBuyer2FullName,
			&record.PrevSaleSeller1FullName,
			&record.PrevSaleSeller2FullName,
		); err != nil {
			return nil, &errors.Object{
				Id:     "ad11c19f-e22f-431b-bd3a-b2eddba9a55d",
				Code:   errors.Code_UNKNOWN,
				Detail: "Failed to select row.",
				Cause:  err.Error(),
			}
		}

		out.Records = append(out.Records, record)
	}

	return out, nil
}
