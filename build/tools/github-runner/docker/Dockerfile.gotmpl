{{- $config := datasource "config" -}}
{{- $container := $config.containers.main -}}
{{- $env := datasource "env" -}}

# Code generated by gomplate. DO NOT EDIT.

FROM {{ $container.image }} AS opt-pkg

RUN apt-get -y update \
	&& apt-get -y upgrade \
	&& apt-get -y install \
	curl \
	libarchive-tools \
	locales \
	p7zip-full \
	rsync \
	xz-utils \
	zstd \
	&& apt-get -y autoclean autoremove \
	&& rm -rf /var/lib/apt/lists/*

ENV LANG=en_US.UTF-8

RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen \
	&& locale-gen

RUN groupadd \
	--gid {{ $container.user.gid }} \
	{{ $container.user.group }} \
	&& useradd \
	--shell /bin/zsh \
	--gid {{ $container.user.gid }} \
	--uid {{ $container.user.uid }} \
	--create-home \
	{{ $container.user.user }}

RUN mkdir -p {{ filepath.Join $container.vars.dirs.opt "pkg" }} \
	&& chmod 0750 {{ filepath.Join $container.vars.dirs.opt "pkg" }} \
	&& chown {{ $container.user.user }}:{{ $container.user.group }} {{ filepath.Join $container.vars.dirs.opt "pkg" }}

RUN mkdir -p {{ filepath.Join $container.vars.dirs.tmp "packages" }} \
	&& chown -R {{ $container.user.user }}:{{ $container.user.group }} {{ filepath.Join $container.vars.dirs.tmp }}
COPY --chown={{ $container.user.user }}:{{ $container.user.group }} .cache {{ filepath.Join $container.vars.dirs.tmp "packages/.cache" }}

USER {{ $container.user.user }}

RUN {{ filepath.Join $container.vars.dirs.tmp "packages/.cache/bin/packer" }} \
	--tracing-level info \
	--config {{ filepath.Join $container.vars.dirs.tmp "packages/.cache/etc/config.yaml" }} \
	--downloads-dir {{ filepath.Join $container.vars.dirs.tmp "packages/.cache/downloads" }} \
	--target {{ $env.PACKER_TARGET }} \
	--packages-dir {{ filepath.Join $container.vars.dirs.opt "pkg" }} \
	--temp-dir {{ $container.vars.dirs.tmp }} \
	--seven-zip 7za \
	--profiles {{ $container.vars.packer.profiles }} \
	--no-download

FROM {{ $container.image }}
LABEL maintainer="{{ $container.maintainer }}"

RUN apt-get -y update \
	&& apt-get -y upgrade \
	&& apt-get -y install \
	build-essential \
	ca-certificates \
	checkinstall \
	clang \
	clang-format \
	clang-tools \
	cmake \
	curl \
	debhelper \
	devscripts \
	dnsutils \
	fakeroot \
	gnupg \
	gnupg-agent \
	gnupg2 \
	graphviz \
	groff \
	hostname \
	hping3 \
	iputils-ping \
	jq \
	less \
	libarchive-tools \
	libssl-dev \
	lintian \
	locales \
	lsb-release \
	lua5.1 \
	luajit2 \
	mariadb-client \
	net-tools \
	nmap \
	p7zip-full \
	pkg-config \
	pwgen \
	python{{ $container.python.version }} \
	python{{ $container.python.version }}-venv \
	python3-dotenv-cli \
	rsync \
	socat \
	software-properties-common \
	sudo \
	uuid-runtime \
	wget \
	whois \
	xz-utils \
	zlib1g-dev \
	zsh \
	zstd \
	&& echo "Adding packages for cross-compilation." \
	&& apt-get -y install \
{{- if eq $container.vars.arch "amd64" }}
	g++-aarch64-linux-gnu \
{{- else if eq $container.vars.arch "arm64" }}
	g++-x86-64-linux-gnu \
{{- end }}
	&& echo "Setting Backports apt sources" \
	&& echo "deb http://deb.debian.org/debian $(lsb_release -cs)-backports main" | tee -a /etc/apt/sources.list.d/debian-backports.list \
	&& echo "Setting Docker apt sources" \
	&& curl -LSfs https://download.docker.com/linux/debian/gpg | apt-key --keyring /usr/share/keyrings/docker-archive-keyring.gpg add - \
	&& echo "deb [signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee -a /etc/apt/sources.list.d/docker-ce.list \
	&& echo "Setting Google apt sources" \
	&& curl -LSfs https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - \
	&& echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \
	&& echo "Setting PostgreSQL apt sources" \
	&& curl -LSfs https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key --keyring /usr/share/keyrings/postgresql.gpg add - \
	&& echo "deb [signed-by=/usr/share/keyrings/postgresql.gpg] http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" | tee -a /etc/apt/sources.list.d/postgresql.list \
	&& apt-get -y update \
	&& apt-get -y install -t $(lsb_release -cs)-backports \
	git \
	valkey-tools \
	&& apt-get -y install \
	docker-ce-cli \
	google-cloud-sdk \
	kubectl \
	postgresql-client \
	&& apt-get -y autoclean autoremove \
	&& rm -rf /var/lib/apt/lists/*

ENV LANG=en_US.UTF-8

RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen \
	&& locale-gen

RUN groupadd \
	--gid {{ $container.vars.docker.gid }} \
	{{ $container.vars.docker.group }} \
	&& groupadd \
	--gid {{ $container.user.gid }} \
	{{ $container.user.group }} \
	&& useradd \
	--shell /bin/zsh \
	--gid {{ $container.user.gid }} \
	--uid {{ $container.user.uid }} \
	--groups {{ $container.vars.docker.group }} \
	--create-home \
	{{ $container.user.user }}

# Sudo config.
RUN echo "{{ $container.user.user }} ALL=(ALL) NOPASSWD:ALL" > {{ filepath.Join "/etc/sudoers.d" $container.user.user }}

COPY --from=opt-pkg --chown={{ $container.user.user }}:{{ $container.user.group }} {{ filepath.Join $container.vars.dirs.opt "pkg" }} {{ filepath.Join $container.vars.dirs.opt "pkg" }}

# Opt out of .NET tools telemetry.
ENV DOTNET_CLI_TELEMETRY_OPTOUT=1

COPY --chown={{ $container.user.user }}:{{ $container.user.group }} home/.zshrc {{ filepath.Join "/home" $container.user.user ".zshrc" }}

# Rclone.
COPY --chown={{ $container.user.user }}:{{ $container.user.group }} .config/rclone/ {{ filepath.Join "/home" $container.user.user ".config/rclone" }}/

COPY --chown={{ $container.user.user }}:{{ $container.user.group }} .docker/ {{ filepath.Join "/home" $container.user.user ".docker" }}/
RUN find {{ filepath.Join "/home" $container.user.user ".docker" }} -type f -regex '.*\.\(gitignore\|gotmpl\)$' | xargs -I{} rm {}

RUN mkdir -p {{ $container.vars.dirs.works }} \
	&& chmod 0750 {{ $container.vars.dirs.works }} \
	&& chown {{ $container.user.user }}:{{ $container.user.group }} {{ $container.vars.dirs.works }}

USER {{ $container.user.user }}
WORKDIR {{ filepath.Join "/home" $container.user.user }}

ENTRYPOINT ["/usr/bin/zsh"]
