{{- $config := datasource "config" -}}
{{- $vars := $config.containers.main.vars -}}

# Code generated by gomplate. DO NOT EDIT.

# General functions.

function append_path() {
    local p=("${(@s/:/)PATH}")

    if (( ! $p[(Ie)$1] )); then
        export PATH="${PATH}:$1"
    fi
}

function prepend_path() {
    local p=("${(@s/:/)PATH}")

    if (( ! $p[(Ie)$1] )); then
        export PATH="$1:${PATH}"
    fi
}

# Exports.
export ABODEMINE_OPT={{ $vars.dirs.opt }}
export ABODEMINE_SHELL=true

if [ -n "${GITHUB_WORKSPACE}" ]; then
    export ABODEMINE_WORKSPACE=${GITHUB_WORKSPACE}
else
    export ABODEMINE_WORKSPACE={{ filepath.Join $vars.dirs.works "src/mono" }}
fi

if [ -n "${RUNNER_TEMP}" ]; then
    export ABODEMINE_TMP="${RUNNER_TEMP}/abodemine"
else
    export ABODEMINE_TMP={{ $vars.dirs.tmp }}
fi

# Order matters.
export LANG=en_US.UTF-8
export LANGUAGE=${LANG}
export LC_ALL=${LANG}

export COREPACK_ENABLE_DOWNLOAD_PROMPT=0
export WORKS_DIR={{ $vars.dirs.works }}
export YARN_CACHE_FOLDER={{ filepath.Join $vars.dirs.works "home/.cache/yarn" }}

if [ ! -d "{{ filepath.Join $vars.dirs.works "home" }}" ]; then
    mkdir -p "{{ filepath.Join $vars.dirs.works "home" }}"
fi

# Update PATH.
function () {
    # This path should be used to experimental work
    # and must not conflict with existing binaries.
    prepend_path "${HOME}/.local/bin"

    # Known paths.
    local paths=(
        "{{ filepath.Join $vars.dirs.works "bin" }}"
    )

    for (( i=1; i<=${#paths[@]}; i++ )); do
        if [ -d "${paths[i]}" ]; then
            append_path "${paths[i]}"
        fi
    done

    # Package paths.
    paths=(${(s/:/)$(cat {{ filepath.Join $vars.dirs.opt "pkg/PATH" }} | envsubst)})

    for (( i=${#paths[@]}; i>0; i-- )); do
        prepend_path "${paths[i]}"
    done

    # Env paths.

    if [ -n "${PATH_APPEND}" ]; then
        paths=(${(s/:/)PATH_APPEND})

        for (( i=1; i<=${#paths[@]}; i++ )); do
            append_path "${paths[i]}"
        done
    fi

    if [ -n "${PATH_PREPEND}" ]; then
        paths=(${(s/:/)PATH_PREPEND})

        for (( i=${#paths[@]}; i>0; i-- )); do
            prepend_path "${paths[i]}"
        done
    fi
}
