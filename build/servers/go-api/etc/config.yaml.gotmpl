{{- $env := datasource "env" -}}
{{- $params := datasource "params" -}}
{{- $project_slug := env.Getenv "ABODEMINE_PROJECT_SLUG" -}}
{{- $project := index $params (path.Join "projects" $project_slug) -}}

{{- $database_servers := index $params "infra/opentofu/projects/databases" -}}
{{- $opensearch_collections := index $params "opensearch/collections" -}}
{{- $opensearch_domains := index $params "opensearch/domains" -}}

# Code generated by gomplate. DO NOT EDIT.

casbin:
  "api/default":
    model: "/app/etc/casbin/api/policies/default/model.conf"
    policy: "/app/etc/casbin/api/policies/default/policy.csv"

deployment_environment: "{{ $env.ABODEMINE_NAMESPACE }}"

duration:
  api_token_exchange_ttl: "{{ index $project.containers.main.config.duration "api_token_exchange_ttl" }}"

  saas_whitelabel_session_default: "{{ index $project.containers.main.config.duration "saas_whitelabel_session_default" }}"
  saas_whitelabel_session_max: "{{ index $project.containers.main.config.duration "saas_whitelabel_session_max" }}"

# env value has precedence over remote config.
{{ if index $env "ABODEMINE_API_FLAGS" }}
flags:
{{- range strings.Split "," $env.ABODEMINE_API_FLAGS }}
  - "{{ . | strings.TrimSpace }}"
{{- end }}
{{ else if index $project.containers.main.config.flags }}
flags:
{{- range index $project.containers.main.config.flags }}
  - "{{ . }}"
{{- end }}
{{ end }}

http_server:
  bind: 0.0.0.0
  port: {{ $project.containers.main.ports.http.port }}
  tls:
    certificates:
      - cert_file: /app/etc/ssl/abodemine.internal-peer-chain.pem
        key_file: /app/etc/ssl/abodemine.internal-peer-key.pem

no_log_color: true

opensearch:
  {{ $database_server := index $database_servers "os-alpha" }}
  search:
    addresses:
      {{- range $database_server.addresses }}
      - {{ . }}
      {{- end }}
    username: "{{ $database_server.username }}"
    password: "{{ $database_server.password }}"
    compress_request_body: true
    discover_nodes_on_start: false

  {{ $domain := $opensearch_domains.legacy_api }}
  legacy_api:
    addresses:
      {{- range $domain.addresses }}
      - {{ . }}
      {{- end }}
    username: "{{ $domain.username }}"
    password: "{{ $domain.password }}"
    compress_request_body: true

paseto:
  # MUST match saas config exactly.
  "token-exchange":
    key: "{{ (index $project.containers.main.config.paseto "token-exchange").key }}"

postgres:
{{ $database_server := index $database_servers "pg-alpha" }}
{{ $database := $params.databases.api }}
  api:
    host: "{{ $database_server.endpoint }}"
    port: {{ $database_server.port }}
    user: "{{ $database.user }}"
    password: "{{ $database.password }}"
    dbname: "{{ $database.name }}"
    options:
      driver: "pgx"
      pingAfterConnect: "true"
{{ $database_server := index $database_servers "pg-beta" }}
{{ $database := $params.databases.datapipe }}
  datapipe:
    host: "{{ $database_server.endpoint_ro }}"
    port: {{ $database_server.port }}
    user: "{{ $database.user }}"
    password: "{{ $database.password }}"
    dbname: "{{ $database.name }}"
    options:
      driver: "pgx"
      pingAfterConnect: "true"

sentry:
  dsn: "{{ $project.config.sentry.dsn }}"

valkey:
{{ $database_server := index $database_servers "vk-alpha" }}
  api:
    nodes:
      - host: "{{ $database_server.endpoint }}"
        port: {{ $database_server.port }}
    scripts:
      "select-api-session":
        file: "/app/etc/valkey/api/select-api-session.lua"
      "update-api-session":
        file: "/app/etc/valkey/api/update-api-session.lua"

  session:
    nodes:
      - host: "{{ $database_server.endpoint }}"
        port: {{ $database_server.port }}
    scripts:
      "create-session":
        file: "/app/etc/valkey/session/create-session.lua"
      "select-session":
        file: "/app/etc/valkey/session/select-session.lua"
      "delete-session":
        file: "/app/etc/valkey/session/delete-session.lua"

  token:
    nodes:
      - host: "{{ $database_server.endpoint }}"
        port: {{ $database_server.port }}
    scripts:
      "create-token":
        file: "/app/etc/valkey/token/create-token.lua"
      "select-token":
        file: "/app/etc/valkey/token/select-token.lua"
      "delete-token":
        file: "/app/etc/valkey/token/delete-token.lua"

{{ $values := index $project.containers.main.config.values }}
values:
  string:
    "os-addresses-index": "{{ index $values.string "os-addresses-index" }}"
