{{- $config := datasource "config" -}}
{{- $endpoints := $config.endpoints -}}
{{- $services := $config.services -}}
{{- $vars := $config.vars -}}
{{- $env := datasource "env" -}}

# Code generated by gomplate. DO NOT EDIT.

services:
{{ if (index $services "clients-admin").enabled }}
  clients-admin:
    profiles:
      - all
      - default
    restart: always
    image: {{ index $vars.docker.images "abodemine-shell" }}
    volumes:
      - {{ (index $vars.docker.volumes "abodemine-works" ).name }}:{{ $vars.dirs.works }}
      - {{ (index $vars.docker.volumes "abodemine-src" ).name }}:{{ $vars.dirs.src }}
    env_file: .env
    environment:
      ABODEMINE_CLIENTS_ADMIN_PORT: "{{ (index $endpoints "clients-admin").internal.ports.http.port }}"
      ABODEMINE_SHELL_SETUP_COREPACK: true
      ABODEMINE_SHELL_SKIP_MAIN_LOOP: true
      ABODEMINE_WORKSPACE: "{{ $vars.dirs.workspace }}"
    entrypoint:
      - zsh
      - -e
      - -c
      - |
        /entrypoint.sh
        source ~/.zshrc

        handle_signal() {
            echo "$1 detected, leaving..."
            kill -$1 $$pid
            exit 0
        }

        trap 'handle_signal SIGINT' INT
        trap 'handle_signal SIGTERM' TERM

        cd {{ filepath.Join $vars.dirs.workspace "code/typescript" }}
        make install
        cd apps/admin
        make dev &

        pid=$!
        echo ">> PID: $$pid"
        wait $$pid
{{ end }}

{{ if (index $services "clients-react-saas").enabled }}
  clients-react-saas:
    profiles:
      - all
      - default
    restart: always
    image: {{ index $vars.docker.images "abodemine-shell" }}
    volumes:
      - {{ (index $vars.docker.volumes "abodemine-works" ).name }}:{{ $vars.dirs.works }}
      - {{ (index $vars.docker.volumes "abodemine-src" ).name }}:{{ $vars.dirs.src }}
    env_file: .env
    environment:
      ABODEMINE_CLIENTS_APP_PORT: "{{ (index $endpoints "clients-react-saas").internal.ports.http.port }}"
      ABODEMINE_SHELL_SETUP_COREPACK: true
      ABODEMINE_SHELL_SKIP_MAIN_LOOP: true
      ABODEMINE_WORKSPACE: "{{ $vars.dirs.workspace }}"
    entrypoint:
      - zsh
      - -e
      - -c
      - |
        /entrypoint.sh
        source ~/.zshrc

        handle_signal() {
            echo "$1 detected, leaving..."
            kill -$1 $$pid
            exit 0
        }

        trap 'handle_signal SIGINT' INT
        trap 'handle_signal SIGTERM' TERM

        cd {{ filepath.Join $vars.dirs.workspace "code/typescript" }}
        make install
        cd apps/saas
        make dev &

        pid=$!
        echo ">> PID: $$pid"
        wait $$pid
{{ end }}

{{ if (index $services "clients-react-saas-whitelabel").enabled }}
  clients-react-saas-whitelabel:
    profiles:
      - all
      - default
    restart: always
    image: {{ index $vars.docker.images "abodemine-shell" }}
    volumes:
      - {{ (index $vars.docker.volumes "abodemine-works" ).name }}:{{ $vars.dirs.works }}
      - {{ (index $vars.docker.volumes "abodemine-src" ).name }}:{{ $vars.dirs.src }}
    env_file: .env
    environment:
      ABODEMINE_CLIENTS_APP_PORT: "{{ (index $endpoints "clients-react-saas-whitelabel").internal.ports.http.port }}"
      ABODEMINE_SHELL_SETUP_COREPACK: true
      ABODEMINE_SHELL_SKIP_MAIN_LOOP: true
      ABODEMINE_WORKSPACE: "{{ $vars.dirs.workspace }}"
    entrypoint:
      - zsh
      - -e
      - -c
      - |
        /entrypoint.sh
        source ~/.zshrc

        handle_signal() {
            echo "$1 detected, leaving..."
            kill -$1 $$pid
            exit 0
        }

        trap 'handle_signal SIGINT' INT
        trap 'handle_signal SIGTERM' TERM

        cd {{ filepath.Join $vars.dirs.workspace "code/typescript" }}
        make install
        cd apps/saas-whitelabel
        make dev &

        pid=$!
        echo ">> PID: $$pid"
        wait $$pid
{{ end }}

# devcontainers have custom images for independent config
# on VSCode, which is based on image name.

{{ if (index $services "dc-go").enabled }}
  dc-go:
    profiles:
      - all
      - devcontainers
    restart: always
    build:
      context: services/dc-go
    volumes:
      - {{ (index $vars.docker.volumes "abodemine-works" ).name }}:{{ $vars.dirs.works }}
      - {{ (index $vars.docker.volumes "abodemine-src" ).name }}:{{ $vars.dirs.src }}
    env_file: .env
    environment:
      ABODEMINE_COMPOSE_SERVICE_NAME: "dc-go"
      ABODEMINE_SHELL_SETUP_COREPACK: true
      ABODEMINE_WORKSPACE: "{{ $vars.dirs.workspace }}"
    working_dir: {{ filepath.Join $vars.dirs.workspace "code/go" }}
    healthcheck:
      test:
        - "CMD"
        - "test"
        - "-f"
        - "${HOME}/.container-ready"
      interval: 3s
      retries: 120
{{ end }}

{{ if (index $services "dc-python").enabled }}
  dc-python:
    profiles:
      - all
      - devcontainers
    restart: always
    build:
      context: services/dc-python
    volumes:
      - {{ (index $vars.docker.volumes "abodemine-works" ).name }}:{{ $vars.dirs.works }}
      - {{ (index $vars.docker.volumes "abodemine-src" ).name }}:{{ $vars.dirs.src }}
    env_file: .env
    environment:
      ABODEMINE_COMPOSE_SERVICE_NAME: "dc-python"
      ABODEMINE_SHELL_SETUP_COREPACK: true
      ABODEMINE_WORKSPACE: "{{ $vars.dirs.workspace }}"
    working_dir: {{ filepath.Join $vars.dirs.workspace "code/python" }}
    healthcheck:
      test:
        - "CMD"
        - "test"
        - "-f"
        - "${HOME}/.container-ready"
      interval: 3s
      retries: 120
{{ end }}

{{ if (index $services "dc-root").enabled }}
  dc-root:
    profiles:
      - all
      - devcontainers
    restart: always
    build:
      context: services/dc-root
    volumes:
      - {{ (index $vars.docker.volumes "abodemine-works" ).name }}:{{ $vars.dirs.works }}
      - {{ (index $vars.docker.volumes "abodemine-src" ).name }}:{{ $vars.dirs.src }}
    env_file: .env
    environment:
      ABODEMINE_COMPOSE_SERVICE_NAME: "dc-root"
      ABODEMINE_SHELL_SETUP_COREPACK: true
      ABODEMINE_WORKSPACE: "{{ $vars.dirs.workspace }}"
    working_dir: {{ filepath.Join $vars.dirs.workspace }}
    healthcheck:
      test:
        - "CMD"
        - "test"
        - "-f"
        - "${HOME}/.container-ready"
      interval: 3s
      retries: 120
{{ end }}

{{ if (index $services "dc-typescript").enabled }}
  dc-typescript:
    profiles:
      - all
      - devcontainers
    restart: always
    build:
      context: services/dc-typescript
    volumes:
      - {{ (index $vars.docker.volumes "abodemine-works" ).name }}:{{ $vars.dirs.works }}
      - {{ (index $vars.docker.volumes "abodemine-src" ).name }}:{{ $vars.dirs.src }}
    env_file: .env
    environment:
      ABODEMINE_COMPOSE_SERVICE_NAME: "dc-typescript"
      ABODEMINE_SHELL_SETUP_COREPACK: true
      ABODEMINE_WORKSPACE: "{{ $vars.dirs.workspace }}"
      PATH_PREPEND: {{ filepath.Join $vars.dirs.workspace "code/typescript/node_modules/.bin" }}
    working_dir: {{ filepath.Join $vars.dirs.workspace "code/typescript" }}
    healthcheck:
      test:
        - "CMD"
        - "test"
        - "-f"
        - "${HOME}/.container-ready"
      interval: 3s
      retries: 120
{{ end }}

{{ if (index $services "envoy").enabled }}
  envoy:
    profiles:
      - all
      - default
    restart: always
    image: {{ $services.envoy.container.image }}
    volumes:
      - {{ (index $vars.docker.volumes "abodemine-works" ).name }}:{{ $vars.dirs.works }}
      - {{ (index $vars.docker.volumes "abodemine-src" ).name }}:{{ $vars.dirs.src }}
{{ if index $env "ENVOY_HOST_PORT" }}
    ports:
      - {{ index $env "ENVOY_HOST_PORT" }}:443
{{ end }}
    command:
      - -c
      - {{ filepath.Join $vars.dirs.workspace $vars.docker.project.relpath "services/envoy/etc/main.yaml" }}
      - --service-cluster
      - front-proxy
{{ end }}

{{ if (index $services "nginx").enabled }}
  nginx:
    depends_on:
      "clients-admin":
        condition: service_started
    profiles:
      - all
      - default
    restart: always
    image: {{ $services.nginx.container.image }}
    volumes:
      - {{ (index $vars.docker.volumes "abodemine-works" ).name }}:{{ $vars.dirs.works }}
      - {{ (index $vars.docker.volumes "abodemine-src" ).name }}:{{ $vars.dirs.src }}
    command:
      - /usr/sbin/nginx
      - -c
      - {{ filepath.Join $vars.dirs.workspace $vars.docker.project.relpath "services/nginx/etc/nginx.conf" }}
{{ end }}

{{ $service := index $services "opensearch" }}
{{ if $service.enabled }}
# https://opensearch.org/docs/latest/install-and-configure/install-opensearch/docker/
  opensearch:
    profiles:
      - all
      - default
    restart: always
    build:
      context: services/opensearch
    volumes:
      - opensearch:/usr/share/opensearch/data
{{ if or (index $env "OPENSEARCH_HOST_PORT_REST_API") (index $env "OPENSEARCH_HOST_PORT_PERFORMANCE_ANALYZER") }}
    ports:
{{ if index $env "OPENSEARCH_HOST_PORT_REST_API" }}      - {{ index $env "OPENSEARCH_HOST_PORT_REST_API" }}:9200{{ end }}
{{ if index $env "OPENSEARCH_HOST_PORT_PERFORMANCE_ANALYZER" }}      - {{ index $env "OPENSEARCH_HOST_PORT_PERFORMANCE_ANALYZER" }}:9600{{ end }}
{{ end }}
    environment:
      - OPENSEARCH_JAVA_OPTS={{ if index $env "OPENSEARCH_JAVA_OPTS" }}{{ index $env "OPENSEARCH_JAVA_OPTS" }}{{ else }}-Xms256m -Xmx256m{{ end }}
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD={{ index $env "OPENSEARCH_INITIAL_ADMIN_PASSWORD" }}
      - bootstrap.memory_lock=true # Disable JVM heap memory swapping
      - discovery.type=single-node
{{ end }}

{{ $service := index $services "opensearch-dashboards" }}
{{ if $service.enabled }}
  opensearch-dashboards:
    depends_on:
      opensearch:
        condition: service_started
    profiles:
      - all
      - default
    restart: always
    image: {{ $service.container.image }}
    environment:
      - OPENSEARCH_HOSTS=https://opensearch:9200
{{ end }}

{{ if (index $services "postgres").enabled }}
  postgres:
    profiles:
      - all
      - default
    restart: always
    build:
      context: services/postgres
    volumes:
      - postgres:/var/lib/postgresql/data
{{ if index $env "POSTGRES_HOST_PORT" }}
    ports:
      - {{ index $env "POSTGRES_HOST_PORT" }}:5432
{{ end }}
    environment:
      POSTGRES_HOST_AUTH_METHOD: {{ or (index $env "POSTGRES_HOST_AUTH_METHOD") "trust" }}
{{ end }}

{{ $service := index $services "servers-go-api" }}
{{ if $service.enabled }}
  servers-go-api:
    depends_on:
      {{ if (index $services "opensearch").enabled }}
      opensearch:
        condition: service_started
      {{ end }}
      {{ if (index $services "postgres").enabled }}
      postgres:
        condition: service_started
      {{ end }}
      {{ if (index $services "valkey").enabled }}
      valkey:
        condition: service_started
      {{ end }}
    profiles:
      - all
      - default
    restart: always
    image: {{ index $vars.docker.images "abodemine-shell" }}
    volumes:
      - {{ (index $vars.docker.volumes "abodemine-works" ).name }}:{{ $vars.dirs.works }}
      - {{ (index $vars.docker.volumes "abodemine-src" ).name }}:{{ $vars.dirs.src }}
    env_file: .env
    environment:
      ABODEMINE_SHELL_SKIP_MAIN_LOOP: true
      ABODEMINE_WORKSPACE: "{{ $vars.dirs.workspace }}"
      {{- range $k, $v := $service.environment }}
      "{{ $k }}": "{{ $v }}"
      {{- end }}
    entrypoint:
      - zsh
      - -e
      - -c
      - |
        /entrypoint.sh
        source ~/.zshrc

        handle_signal() {
            echo "$1 detected, leaving..."
            kill -$1 $$pid
            exit 0
        }

        trap 'handle_signal SIGINT' INT
        trap 'handle_signal SIGTERM' TERM

        cd {{ filepath.Join $vars.dirs.workspace "code/go/abodemine/servers/api" }}

        make watch &

        pid=$!
        echo ">> PID: $$pid"
        wait $$pid
{{ end }}

{{ $service := index $services "servers-go-saas" }}
{{ if $service.enabled }}
  servers-go-saas:
    depends_on:
      {{ if (index $services "opensearch").enabled }}
      opensearch:
        condition: service_started
      {{ end }}
      {{ if (index $services "postgres").enabled }}
      postgres:
        condition: service_started
      {{ end }}
      {{ if (index $services "valkey").enabled }}
      valkey:
        condition: service_started
      {{ end }}
    profiles:
      - all
      - default
    restart: always
    image: {{ index $vars.docker.images "abodemine-shell" }}
    volumes:
      - {{ (index $vars.docker.volumes "abodemine-works" ).name }}:{{ $vars.dirs.works }}
      - {{ (index $vars.docker.volumes "abodemine-src" ).name }}:{{ $vars.dirs.src }}
    env_file: .env
    environment:
      ABODEMINE_SHELL_SKIP_MAIN_LOOP: true
      ABODEMINE_WORKSPACE: "{{ $vars.dirs.workspace }}"
      {{- range $k, $v := $service.environment }}
      "{{ $k }}": "{{ $v }}"
      {{- end }}
    entrypoint:
      - zsh
      - -e
      - -c
      - |
        /entrypoint.sh
        source ~/.zshrc

        handle_signal() {
            echo "$1 detected, leaving..."
            kill -$1 $$pid
            exit 0
        }

        trap 'handle_signal SIGINT' INT
        trap 'handle_signal SIGTERM' TERM

        cd {{ filepath.Join $vars.dirs.workspace "code/go/abodemine/servers/saas" }}

        make watch &

        pid=$!
        echo ">> PID: $$pid"
        wait $$pid
{{ end }}

{{ if (index $services "valkey").enabled }}
  valkey:
    profiles:
      - all
      - default
    restart: always
    image: {{ $services.valkey.container.image }}
    volumes:
      - valkey:/data
{{ if index $env "REDIS_HOST_PORT" }}
    ports:
      - {{ index $env "REDIS_HOST_PORT" }}:6379
{{ end }}
    user: "{{ $services.valkey.container.user.user }}"
{{ end }}

networks:
  default:
    external: true
    name: "{{ $vars.docker.network.name }}"

volumes:
  opensearch:
  postgres:
  valkey:

  # Use external volumes so we don't accidentally delete them
  # when resetting the environment.

  {{ (index $vars.docker.volumes "abodemine-src" ).name }}:
    external: true

  {{ (index $vars.docker.volumes "abodemine-works" ).name }}:
    external: true
