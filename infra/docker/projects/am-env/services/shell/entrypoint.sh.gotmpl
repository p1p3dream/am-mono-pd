{{- $config := datasource "config" -}}
{{- $service := index $config.services "shell" -}}
{{- $container := $service.container -}}
{{- $vars := $config.vars -}}

#!/bin/sh

# Code generated by gomplate. DO NOT EDIT.

# Ensure other (container) users can chdir into the works directory.
sudo chown {{ $container.user.user }}:{{ $container.user.group }} {{ $vars.dirs.works }}
sudo chmod 0755 {{ $vars.dirs.works }}

for dir in \
    "cache" \
    "home" \
    "src" \
    ; do
    if [ ! -d {{ filepath.Join $vars.dirs.works "${dir}" }} ]; then
        mkdir {{ filepath.Join $vars.dirs.works "${dir}" }}
    fi

    sudo chown {{ $container.user.user }}:{{ $container.user.group }} {{ filepath.Join $vars.dirs.works "${dir}" }}
done

if [ -f {{ filepath.Join $vars.dirs.workspace "etc/ssl/abodemine-ca.pem" }} ]; then
    sudo cp {{ filepath.Join $vars.dirs.workspace "etc/ssl/abodemine-ca.pem" }} /usr/local/share/ca-certificates/abodemine-ca.crt
    sudo update-ca-certificates
fi

export COREPACK_ENABLE_DOWNLOAD_PROMPT=0
export DOTNET_CLI_TELEMETRY_OPTOUT=1
export PATH=$(cat {{ filepath.Join $vars.dirs.opt "pkg/PATH" }} | envsubst):${PATH}
export YARN_CACHE_FOLDER={{ filepath.Join $vars.dirs.works "home/.cache/yarn" }}

if [ -n "${PATH_APPEND}" ]; then
    export PATH=${PATH}:${PATH_APPEND}
fi

if [ -n "${PATH_PREPEND}" ]; then
    export PATH=${PATH_PREPEND}:${PATH}
fi

if [ -n "$1" ]; then
    $@
    exit $?
fi

handle_signal() {
    echo "$1 detected, leaving..."
    exit 0
}

trap 'handle_signal SIGINT' INT
trap 'handle_signal SIGTERM' TERM

for dir in \
    .ansible \
    .aspnet \
    .aws \
    .cache \
    .cargo \
    .config \
    .dlv \
    .docker \
    .dotnet \
    .ecr \
    .gnupg:0700 \
    .gsutil \
    .kube \
    .local \
    .npm \
    .nuget \
    .rustup \
    .ssh:0700 \
    .swiftpm \
    go \
    ; do
    chmod=

    if printf "${dir}" | grep -q ":"; then
        chmod=$(printf "${dir}" | cut -d: -f2)
        dir=$(printf "${dir}" | cut -d: -f1)
    fi

    containerDir=${HOME}/${dir}
    diskDir={{ $vars.dirs.works }}/home/${dir}

    mkdir -p ${diskDir}

    if [ -d ${containerDir} ] && [ ! -L ${containerDir} ]; then
        # If the target directory is empty, copy the contents of the source directory.
        if [ -z "$(ls -A ${diskDir})" ]; then
            echo "Copying contents of ${containerDir} to ${diskDir}."
            rsync -a ${containerDir}/ ${diskDir}/
        fi

        mv ${containerDir} ${containerDir}.bak
    fi

    # Permissions after sync to prevent overwriting.
    if [ -n "${chmod}" ]; then
        echo "Setting permissions of ${diskDir} to ${chmod}."
        chmod ${chmod} ${diskDir}
    fi

    if [ ! -L ${containerDir} ]; then
        ln -s ${diskDir} ${containerDir}
    fi
done

for file in \
    .gitconfig \
    .psql_history \
    .python_history \
    .valkeycli_history \
    .zsh_history \
    ; do
    containerFile=${HOME}/${file}
    diskFile={{ $vars.dirs.works }}/home/${file}

    if [ -f ${containerFile} ] && [ ! -L ${containerFile} ]; then
        # If the target file does not exist, copy the source file.
        if [ ! -f ${diskFile} ]; then
            echo "Copying ${containerFile} to ${diskFile}."
            cp ${containerFile} ${diskFile}
        fi

        mv ${containerFile} ${containerFile}.bak
    fi

    if [ ! -L ${containerFile} ]; then
        ln -s ${diskFile} ${containerFile}
    fi
done

# Ensure one vscode-server dir per devcontainer to prevent problems.
if [ -n "${ABODEMINE_COMPOSE_SERVICE_NAME}" ]; then
    if echo "${ABODEMINE_COMPOSE_SERVICE_NAME}" | grep -q "^dc-"; then
        vscodeServerDir={{ $vars.dirs.works }}/home/.vscode-server-${ABODEMINE_COMPOSE_SERVICE_NAME}
        containerDir=${HOME}/.vscode-server

        mkdir -p ${vscodeServerDir}

        if [ ! -L ${containerDir} ]; then
            rm -rf ${containerDir}
            ln -s ${vscodeServerDir} ${containerDir}
        fi
    fi
fi

if [ "${ABODEMINE_SHELL_NFS_SERVER_ENABLED}" = "true" ]; then
    sudo service rpcbind start
    sudo service nfs-kernel-server start
fi

if [ "${ABODEMINE_SHELL_SSH_SERVER_ENABLED}" = "true" ]; then
    sudo mkdir -p /run/sshd
    sudo /usr/sbin/sshd
fi

if [ "${ABODEMINE_SHELL_SETUP_COREPACK}" = "true" ]; then
    # Enable corepack and cache the packages.
    corepack enable

    echo "pnpm: $(pnpm --version)"
    echo "yarn: $(yarn --version)"
    echo "yarnpkg: $(yarnpkg --version)"
fi

if [ "${ABODEMINE_SHELL_SETUP_DOCKER_SOCK}" = "true" ]; then
    sudo chgrp {{ $service.vars.docker.group }} /var/run/docker.sock
fi

if [ "${ABODEMINE_SHELL_GNUPG_ENABLED}" = "true" ]; then
    gpg-agent --homedir ${HOME}/.gnupg --daemon

    for name in {{ range $service.vars.gnupg.profiles }}"{{ .name }}" {{ end }}; do
        if gpg --list-secret-keys --keyid-format LONG | grep -q "${name}"; then
            echo "Found gnupg key ${name}."
            continue
        fi

        echo "Installing gnupg key ${name}."

        # MUST have the --batch flag when running in a non-interactive environment.
        gpg --batch --import {{ filepath.Join $vars.dirs.works "home/.gnupg/${name}" }}.gpg
    done
fi

if [ "${ABODEMINE_SHELL_SKIP_MAIN_LOOP}" = "true" ]; then
    exit 0
fi

touch ${HOME}/.container-ready
echo "Container ready. Entering main loop."

while true; do
    pid=
    sleep 3600 &
    pid=$!
    wait
done
