{{- $env := datasource "env" -}}
{{- $lambda_name := env.Getenv "ABODEMINE_LAMBDA_NAME" -}}
{{- $lambda_slug := env.Getenv "ABODEMINE_LAMBDA_SLUG" -}}
{{- $params := datasource "params" -}}
{{- $project_slug := env.Getenv "ABODEMINE_PROJECT_SLUG" -}}

{{- $database_servers := index $params "infra/opentofu/projects/databases" -}}
{{- $lambda := index $params (path.Join "projects" $project_slug "lambdas" $lambda_name) -}}
{{- $locker_table := index (index $params "dynamodb/tables") "locker" -}}
{{- $project := index $params (path.Join "projects" $project_slug) -}}
{{- $workers_go_datapipe := index $params "projects/workers-go-datapipe" -}}
{{- $workers_shared := index $params "projects/workers-shared" -}}

# Code generated by gomplate. DO NOT EDIT.

deployment_environment: "{{ $env.ABODEMINE_NAMESPACE }}"

distributed_lockers:
  fetcher:
    table_name: {{ (index $params "dynamodb/tables").locker.name }}
    keys:
      {{ $task := index $params (path.Join "projects" $project_slug "tasks/fetcher") }}
      "attom-data": "{{ (index $task.containers.main.config.partners "attom-data").locker_key }}"
      "first-american": "{{ (index $task.containers.main.config.partners "first-american").locker_key }}"

  loader:
    table_name: {{ (index $params "dynamodb/tables").locker.name }}
    keys:
      {{ $task := index $params (path.Join "projects" $project_slug "tasks/loader") }}
      "attom-data": "{{ (index $task.containers.main.config.partners "attom-data").locker_key }}"
      "first-american": "{{ (index $task.containers.main.config.partners "first-american").locker_key }}"

  osloader:
    table_name: {{ (index $params "dynamodb/tables").locker.name }}
    keys:
      {{ $task := index $params (path.Join "projects" $project_slug "tasks/osloader") }}
      "abodemine": "{{ (index $task.containers.main.config.partners "abodemine").locker_key }}"

  synther:
    table_name: {{ (index $params "dynamodb/tables").locker.name }}
    keys:
      {{ $task := index $params (path.Join "projects" $project_slug "tasks/synther") }}
      "abodemine": "{{ (index $task.containers.main.config.partners "abodemine").locker_key }}"

lambdas:
  task_launcher:
    sqs_queue_url: "{{ $lambda.config.sqs_queue_url }}"

    tasks:
      {{ $task := index $params (path.Join "projects" $project_slug "tasks/fetcher") }}
      fetcher:
        cluster_arn: "{{ $workers_shared.ecs.clusters.main_fargate.arn }}"

        container_overrides:
          attom-data:
            {{ $partner := index $task.containers.main.config.partners "attom-data" }}
            - name: main
              command:
                - run
                - --partner-id
                - {{ $partner.partner_id }}
                - --rclone-src
                {{- $rclone := (index $params "rclone/attom-data").ftp }}
                - {{ $rclone.name }}:{{ $rclone.prefix }}/
                - --rclone-dst
                {{- $rclone := (index $params "rclone/attom-data").s3 }}
                - {{ $rclone.name }}:{{ (index $workers_go_datapipe.s3_buckets "partner-data-attom-data").name }}{{ $partner.bucket_prefix }}/
                - --rclone-checkers
                - {{ $partner.rclone_checkers }}
                - --rclone-transfers
                - {{ $partner.rclone_transfers }}

          first-american:
            {{ $partner := index $task.containers.main.config.partners "first-american" }}
            - name: main
              command:
                - run
                - --partner-id
                - {{ $partner.partner_id }}
                - --rclone-src
                {{- $rclone := (index $params "rclone/first-american").ftp }}
                - "{{ $rclone.name }}:{{ $rclone.prefix }}/"
                - --rclone-dst
                {{- $rclone := (index $params "rclone/first-american").s3 }}
                - "{{ $rclone.name }}:{{ (index $workers_go_datapipe.s3_buckets "partner-data-first-american").name }}{{ $partner.bucket_prefix }}/"
                - --rclone-checkers
                - {{ $partner.rclone_checkers }}
                - --rclone-transfers
                - {{ $partner.rclone_transfers }}

        network_configuration:
          vpc_configuration:
            security_groups:
              {{- range $task.security_groups }}
              - "{{ .id }}"
              {{- end }}
            subnets:
              {{- range (index $params "aws/vpcs").main.private_subnets }}
              - "{{ .id }}"
              {{- end }}

        task_definition_arn: "{{ $task.ecs.task_definition.arn }}"

      {{ $task := index $params (path.Join "projects" $project_slug "tasks/loader") }}
      loader:
        cluster_arn: "{{ $workers_shared.ecs.clusters.main_fargate.arn }}"

        container_overrides:
          attom-data:
            {{ $partner := index $task.containers.main.config.partners "attom-data" }}
            - name: main
              command:
                - run
                - --bucket
                - {{ (index $workers_go_datapipe.s3_buckets "partner-data-attom-data").name }}
                - --partner-id
                - {{ $partner.partner_id }}
                - --prefix
                - ftp
                - --version
                - v2

          first-american:
            {{ $partner := index $task.containers.main.config.partners "first-american" }}
            - name: main
              command:
                - run
                - --bucket
                - {{ (index $workers_go_datapipe.s3_buckets "partner-data-first-american").name }}
                - --partner-id
                - {{ $partner.partner_id }}
                - --prefix
                - ftp
                - --version
                - v2

        network_configuration:
          vpc_configuration:
            security_groups:
              {{- range $task.security_groups }}
              - "{{ .id }}"
              {{- end }}
              - "{{ (index $database_servers "os-alpha").security_groups.users.id }}"
              - "{{ (index $database_servers "pg-beta").security_groups.users.id }}"
            subnets:
              {{- range (index $params "aws/vpcs").main.private_subnets }}
              - "{{ .id }}"
              {{- end }}

        task_definition_arn: "{{ $task.ecs.task_definition.arn }}"

      {{ $task := index $params (path.Join "projects" $project_slug "tasks/osloader") }}
      osloader:
        cluster_arn: "{{ $workers_shared.ecs.clusters.main_fargate.arn }}"

        container_overrides:
          abodemine:
            {{ $partner := index $task.containers.main.config.partners "abodemine" }}
            - name: main
              command:
                - run
                - --partner-id
                - {{ $partner.partner_id }}
                - --index-name
                - {{ $task.containers.main.config.index_name }}

        network_configuration:
          vpc_configuration:
            security_groups:
              {{- range $task.security_groups }}
              - "{{ .id }}"
              {{- end }}
              - "{{ (index $database_servers "os-alpha").security_groups.users.id }}"
              - "{{ (index $database_servers "pg-beta").security_groups.users.id }}"
            subnets:
              {{- range (index $params "aws/vpcs").main.private_subnets }}
              - "{{ .id }}"
              {{- end }}

        task_definition_arn: "{{ $task.ecs.task_definition.arn }}"

      {{ $task := index $params (path.Join "projects" $project_slug "tasks/synther") }}
      synther:
        cluster_arn: "{{ $workers_shared.ecs.clusters.main_fargate.arn }}"

        container_overrides:
          abodemine:
            {{ $partner := index $task.containers.main.config.partners "abodemine" }}
            - name: main
              command:
                - run
                - --os-index-name
                - {{ $task.containers.main.config.index_name }}

        network_configuration:
          vpc_configuration:
            security_groups:
              {{- range $task.security_groups }}
              - "{{ .id }}"
              {{- end }}
              - "{{ (index $database_servers "os-alpha").security_groups.users.id }}"
              - "{{ (index $database_servers "pg-beta").security_groups.users.id }}"
            subnets:
              {{- range (index $params "aws/vpcs").main.private_subnets }}
              - "{{ .id }}"
              {{- end }}

        task_definition_arn: "{{ $task.ecs.task_definition.arn }}"

no_log_color: true

sentry:
  dsn: "{{ $lambda.config.sentry.dsn }}"
