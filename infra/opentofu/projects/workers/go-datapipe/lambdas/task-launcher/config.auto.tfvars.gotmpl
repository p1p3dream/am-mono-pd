{{- $deployment := env.Getenv "ABODEMINE_TOFU_DEPLOYMENT" -}}
{{- $lambda_name := env.Getenv "ABODEMINE_LAMBDA_NAME" -}}
{{- $lambda_slug := env.Getenv "ABODEMINE_LAMBDA_SLUG" -}}
{{- $params := datasource "params" -}}
{{- $project_slug := env.Getenv "ABODEMINE_PROJECT_SLUG" -}}

{{- $lambda := index $params (path.Join "projects" $project_slug "lambdas" $lambda_name) -}}
{{- $project := index $params (path.Join "projects" $project_slug) -}}
{{- $tasks_fetcher := index $params (path.Join "projects" $project_slug "tasks/fetcher") -}}
{{- $tasks_loader := index $params (path.Join "projects" $project_slug "tasks/loader") -}}
{{- $tasks_osloader := index $params (path.Join "projects" $project_slug "tasks/osloader") -}}
{{- $tasks_synther := index $params (path.Join "projects" $project_slug "tasks/synther") -}}

# Code generated by gomplate. DO NOT EDIT.

aws_account_id = "{{ $params.aws.account_id }}"
aws_region     = "{{ $params.aws.region }}"
deployment     = "{{ $deployment }}"

dynamodb = {
  locker = {
    allowed_keys = [
      "{{ (index $tasks_fetcher.containers.main.config.partners "attom-data").locker_key }}",
      "{{ (index $tasks_fetcher.containers.main.config.partners "first-american").locker_key }}",
      "{{ (index $tasks_loader.containers.main.config.partners "attom-data").locker_key }}",
      "{{ (index $tasks_loader.containers.main.config.partners "first-american").locker_key }}",
      "{{ (index $tasks_osloader.containers.main.config.partners "abodemine").locker_key }}",
      "{{ (index $tasks_synther.containers.main.config.partners "abodemine").locker_key }}",
    ]
    table_arn = "{{ (index $params "dynamodb/tables").locker.arn }}"
  }
}

lambda = {
  allow_pass_role_on = [
    "{{ $tasks_fetcher.iam_role }}",
    "{{ $tasks_loader.iam_role }}",
    "{{ $tasks_osloader.iam_role }}",
    "{{ $tasks_synther.iam_role }}",
  ]

  allow_run_task_on = [
    "{{ $tasks_fetcher.ecs.task_definition.arn }}:*",
    "{{ $tasks_loader.ecs.task_definition.arn }}:*",
    "{{ $tasks_osloader.ecs.task_definition.arn }}:*",
    "{{ $tasks_synther.ecs.task_definition.arn }}:*",
  ]

  slug = "{{ $lambda_slug }}"
}

project = {
  slug = "{{ $project_slug }}"
}

s3_backend_bucket = "{{ index $params "infra/opentofu/projects/main" "s3_backend_bucket" }}"

s3_backend_keys = {
  main                = "{{ index $params "infra/opentofu/projects/main" "s3_backend_key" }}"
  lambda              = "{{ $lambda.opentofu.backend_keys.infra }}"
  workers_go_datapipe = "{{ $project.opentofu.backend_keys.infra }}"
  workers_shared      = "{{ (index $params "projects/workers-shared").opentofu.backend_keys.infra }}"
}

s3_backend_table = "{{ index $params "infra/opentofu/projects/main" "s3_backend_table" }}"

tags = {
  context    = "infra"
  deployment = "{{ $deployment }}"
  opentofu   = "true"
  project    = "{{ $project_slug }}"
  lambda     = "{{ $lambda_name }}"
}
