{{- $config := datasource "config" -}}
{{- $user_data := $config.vars.user_data -}}

#!/usr/bin/zsh
# Code generated by gomplate. DO NOT EDIT.

set -eo pipefail

source ~/.abodemine/code/zsh/base.zsh

for DIR in \
    "cache" \
    "home" \
    "src" \
    ; do
    if [ ! -d {{ filepath.Join $user_data.dirs.works "${DIR}" }} ]; then
        mkdir {{ filepath.Join $user_data.dirs.works "${DIR}" }}
    fi
done

if [ -d {{ filepath.Join $user_data.dirs.opt "pkg/actions-runner" }} ] && [ ! -d {{ filepath.Join $user_data.dirs.works "runner" }} ]; then
    echo "Syncing actions-runner."
    mkdir {{ filepath.Join $user_data.dirs.works "runner" }}
    rsync -a {{ filepath.Join $user_data.dirs.opt "pkg/actions-runner" }}/ {{ filepath.Join $user_data.dirs.works "runner" }}/
fi

for DIR in \
    .ansible \
    .aspnet \
    .aws \
    .cache \
    .cargo \
    .config \
    .dlv \
    .docker \
    .dotnet \
    .ecr \
    .gnupg:0700 \
    .gsutil \
    .kube \
    .local \
    .npm \
    .nuget \
    .rustup \
    .ssh:0700 \
    .swiftpm \
    .vscode-server \
    go \
    ; do
    CHMOD=

    if printf "${DIR}" | grep -q ":"; then
        CHMOD=$(printf "${DIR}" | cut -d: -f2)
        DIR=$(printf "${DIR}" | cut -d: -f1)
    fi

    BASE_DIR=${HOME}/${DIR}
    TARGET_DIR={{ filepath.Join $user_data.dirs.works "/home/${DIR}" }}

    mkdir -p ${TARGET_DIR}

    if [ -d ${BASE_DIR} ] && [ ! -L ${BASE_DIR} ]; then
        # If the target directory is empty, copy the contents of the source directory.
        if [ -z "$(ls -A ${TARGET_DIR})" ]; then
            echo "Syncing ${BASE_DIR} to ${TARGET_DIR}.".
            rsync -a ${BASE_DIR}/ ${TARGET_DIR}/
        fi

        mv ${BASE_DIR} ${BASE_DIR}.bak
    fi

    # Permissions after sync to prevent overwriting.
    if [ -n "${CHMOD}" ]; then
        chmod -v ${CHMOD} ${TARGET_DIR}
    fi

    if [ ! -L ${BASE_DIR} ]; then
        ln -s ${TARGET_DIR} ${BASE_DIR}
    fi
done

for file in \
    .gitconfig \
    .psql_history \
    .python_history \
    .valkeycli_history \
    .zsh_history \
    ; do
    BASE_FILE=${HOME}/${file}
    TARGET_FILE={{ filepath.Join $user_data.dirs.works "/home/${file}" }}

    if [ -f ${BASE_FILE} ] && [ ! -L ${BASE_FILE} ]; then
        # If the target file does not exist, copy the source file.
        if [ ! -f ${TARGET_FILE} ]; then
            cp -v ${BASE_FILE} ${TARGET_FILE}
        fi

        mv ${BASE_FILE} ${BASE_FILE}.bak
    fi

    if [ ! -L ${BASE_FILE} ]; then
        ln -s ${TARGET_FILE} ${BASE_FILE}
    fi
done
