{{- $config := datasource "config" -}}
{{- $user_data := $config.vars.user_data -}}

# Code generated by gomplate. DO NOT EDIT.

################################################################################
# General functions.
################################################################################

function append_path() {
    local p=("${(@s/:/)PATH}")

    if (( ! $p[(Ie)$1] )); then
        export PATH="${PATH}:$1"
    fi
}

function prepend_path() {
    local p=("${(@s/:/)PATH}")

    if (( ! $p[(Ie)$1] )); then
        export PATH="$1:${PATH}"
    fi
}

################################################################################
# Exports.
################################################################################

# AbodeMine.
export ABODEMINE_CACHE={{ $user_data.dirs.cache }}
export ABODEMINE_NAMESPACE={{ $user_data.namespace }}
export ABODEMINE_OPT={{ $user_data.dirs.opt }}
export ABODEMINE_RUNNER=true
export ABODEMINE_SHELL=true
export ABODEMINE_SRC={{ $user_data.dirs.src }}
export ABODEMINE_TMP={{ $user_data.dirs.tmp }}
export WORKS_DIR={{ $user_data.dirs.works }}

# Lang. Order matters.
export LANG=en_US.UTF-8
export LANGUAGE=${LANG}
export LC_ALL=${LANG}

# Misc.
export COREPACK_ENABLE_DOWNLOAD_PROMPT=0
export DOTNET_CLI_TELEMETRY_OPTOUT=1
export YARN_CACHE_FOLDER={{ filepath.Join $user_data.dirs.works "home/.cache/yarn" }}

# Update PATH.
function () {
    # This path should be used to experimental work
    # and must not conflict with existing binaries.
    prepend_path "${HOME}/.local/bin"

    # Known paths.
    local paths=(
        "{{ filepath.Join $user_data.dirs.works "bin" }}"
    )

    for (( i=1; i<=${#paths[@]}; i++ )); do
        if [ -d "${paths[i]}" ]; then
            append_path "${paths[i]}"
        fi
    done

    # Package paths.
    paths=(${(s/:/)$(cat {{ filepath.Join $user_data.dirs.opt "pkg/PATH" }} | envsubst)})

    for (( i=${#paths[@]}; i>0; i-- )); do
        prepend_path "${paths[i]}"
    done

    # Env paths.

    if [ -n "${PATH_APPEND}" ]; then
        paths=(${(s/:/)PATH_APPEND})

        for (( i=1; i<=${#paths[@]}; i++ )); do
            append_path "${paths[i]}"
        done
    fi

    if [ -n "${PATH_PREPEND}" ]; then
        paths=(${(s/:/)PATH_PREPEND})

        for (( i=${#paths[@]}; i>0; i-- )); do
            prepend_path "${paths[i]}"
        done
    fi
}
